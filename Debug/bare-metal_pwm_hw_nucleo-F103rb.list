
bare-metal_pwm_hw_nucleo-F103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080040a0  080040a0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040a0  080040a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080040a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  08004120  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004120  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c40e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd9  00000000  00000000  0002c4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  0002eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018312  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcea  00000000  00000000  00047aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac6f  00000000  00000000  000557d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d98  00000000  00000000  000e0444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d9  00000000  00000000  000e41dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f70 	.word	0x08003f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003f70 	.word	0x08003f70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 fd4c 	bl	8002bfc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fac2 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80b 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8ea 	bl	8000344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8be 	bl	80002f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000174:	f000 f846 	bl	8000204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000178:	f002 fa0c 	bl	8002594 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 800017c:	f002 fa8e 	bl	800269c <app_update>
 8000180:	e7fc      	b.n	800017c <main+0x20>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b090      	sub	sp, #64	; 0x40
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0318 	add.w	r3, r7, #24
 800018c:	2228      	movs	r2, #40	; 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f002 ffb8 	bl	8003106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a4:	2302      	movs	r3, #2
 80001a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ac:	2310      	movs	r3, #16
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b4:	2300      	movs	r3, #0
 80001b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fde4 	bl	8000d90 <HAL_RCC_OscConfig>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ce:	f000 f927 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
 80001d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d6:	2302      	movs	r3, #2
 80001d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2102      	movs	r1, #2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 f851 	bl	8001294 <HAL_RCC_ClockConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f8:	f000 f912 	bl	8000420 <Error_Handler>
  }
}
 80001fc:	bf00      	nop
 80001fe:	3740      	adds	r7, #64	; 0x40
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b08e      	sub	sp, #56	; 0x38
 8000208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000218:	f107 0320 	add.w	r3, r7, #32
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000234:	4b2d      	ldr	r3, [pc, #180]	; (80002ec <MX_TIM2_Init+0xe8>)
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 800023c:	4b2b      	ldr	r3, [pc, #172]	; (80002ec <MX_TIM2_Init+0xe8>)
 800023e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000242:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000244:	4b29      	ldr	r3, [pc, #164]	; (80002ec <MX_TIM2_Init+0xe8>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800024a:	4b28      	ldr	r3, [pc, #160]	; (80002ec <MX_TIM2_Init+0xe8>)
 800024c:	22c7      	movs	r2, #199	; 0xc7
 800024e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000250:	4b26      	ldr	r3, [pc, #152]	; (80002ec <MX_TIM2_Init+0xe8>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000256:	4b25      	ldr	r3, [pc, #148]	; (80002ec <MX_TIM2_Init+0xe8>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800025c:	4823      	ldr	r0, [pc, #140]	; (80002ec <MX_TIM2_Init+0xe8>)
 800025e:	f001 f9a7 	bl	80015b0 <HAL_TIM_Base_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000268:	f000 f8da 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800026c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	4619      	mov	r1, r3
 8000278:	481c      	ldr	r0, [pc, #112]	; (80002ec <MX_TIM2_Init+0xe8>)
 800027a:	f001 fcad 	bl	8001bd8 <HAL_TIM_ConfigClockSource>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000284:	f000 f8cc 	bl	8000420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000288:	4818      	ldr	r0, [pc, #96]	; (80002ec <MX_TIM2_Init+0xe8>)
 800028a:	f001 f9e0 	bl	800164e <HAL_TIM_PWM_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000294:	f000 f8c4 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029c:	2300      	movs	r3, #0
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002a0:	f107 0320 	add.w	r3, r7, #32
 80002a4:	4619      	mov	r1, r3
 80002a6:	4811      	ldr	r0, [pc, #68]	; (80002ec <MX_TIM2_Init+0xe8>)
 80002a8:	f002 f826 	bl	80022f8 <HAL_TIMEx_MasterConfigSynchronization>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80002b2:	f000 f8b5 	bl	8000420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002b6:	2360      	movs	r3, #96	; 0x60
 80002b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <MX_TIM2_Init+0xe8>)
 80002ce:	f001 fbc1 	bl	8001a54 <HAL_TIM_PWM_ConfigChannel>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80002d8:	f000 f8a2 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <MX_TIM2_Init+0xe8>)
 80002de:	f000 f8fb 	bl	80004d8 <HAL_TIM_MspPostInit>

}
 80002e2:	bf00      	nop
 80002e4:	3738      	adds	r7, #56	; 0x38
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000094 	.word	0x20000094

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f002 f856 	bl	80023d8 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f875 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000dc 	.word	0x200000dc
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <MX_GPIO_Init+0xcc>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a26      	ldr	r2, [pc, #152]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <MX_GPIO_Init+0xcc>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0308 	and.w	r3, r3, #8
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4815      	ldr	r0, [pc, #84]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003be:	f000 fcad 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_GPIO_Init+0xd4>)
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	4811      	ldr	r0, [pc, #68]	; (800041c <MX_GPIO_Init+0xd8>)
 80003d8:	f000 fb1c 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003dc:	2320      	movs	r3, #32
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003f4:	f000 fb0e 	bl	8000a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2028      	movs	r0, #40	; 0x28
 80003fe:	f000 fad2 	bl	80009a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000402:	2028      	movs	r0, #40	; 0x28
 8000404:	f000 faeb 	bl	80009de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800
 8000418:	10110000 	.word	0x10110000
 800041c:	40011000 	.word	0x40011000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004a0:	d113      	bne.n	80004ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_TIM_Base_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <HAL_TIM_Base_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_TIM_Base_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	201c      	movs	r0, #28
 80004c0:	f000 fa71 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004c4:	201c      	movs	r0, #28
 80004c6:	f000 fa8a 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f6:	d117      	bne.n	8000528 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <HAL_TIM_MspPostInit+0x58>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <HAL_TIM_MspPostInit+0x58>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_TIM_MspPostInit+0x58>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000510:	2301      	movs	r3, #1
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2302      	movs	r3, #2
 800051a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <HAL_TIM_MspPostInit+0x5c>)
 8000524:	f000 fa76 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800

08000538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <HAL_UART_MspInit+0x70>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d123      	bne.n	80005a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_UART_MspInit+0x74>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	4a13      	ldr	r2, [pc, #76]	; (80005ac <HAL_UART_MspInit+0x74>)
 800055e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000562:	61d3      	str	r3, [r2, #28]
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_UART_MspInit+0x74>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_UART_MspInit+0x74>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <HAL_UART_MspInit+0x74>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_UART_MspInit+0x74>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000588:	230c      	movs	r3, #12
 800058a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_UART_MspInit+0x78>)
 800059c:	f000 fa3a 	bl	8000a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40004400 	.word	0x40004400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr

080005f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fa:	f000 f8bd 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <TIM2_IRQHandler+0x10>)
 800060a:	f001 f91b 	bl	8001844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000094 	.word	0x20000094

08000618 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800061c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000620:	f000 fb94 	bl	8000d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f002 fda4 	bl	80031a4 <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20005000 	.word	0x20005000
 8000688:	00000400 	.word	0x00000400
 800068c:	20000124 	.word	0x20000124
 8000690:	20000370 	.word	0x20000370

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff fff8 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a6:	490c      	ldr	r1, [pc, #48]	; (80006d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006bc:	4c09      	ldr	r4, [pc, #36]	; (80006e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f002 fd71 	bl	80031b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd45 	bl	800015c <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80006dc:	080040a8 	.word	0x080040a8
  ldr r2, =_sbss
 80006e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80006e4:	2000036c 	.word	0x2000036c

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f947 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe90 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f95f 	bl	80009fa <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f927 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000008 	.word	0x20000008
 8000798:	20000128 	.word	0x20000128

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000128 	.word	0x20000128

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <__NVIC_EnableIRQ+0x34>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff90 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff2d 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff42 	bl	8000840 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff35 	bl	800085c <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b08b      	sub	sp, #44	; 0x2c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a26:	e169      	b.n	8000cfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69fa      	ldr	r2, [r7, #28]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	f040 8158 	bne.w	8000cf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4a9a      	ldr	r2, [pc, #616]	; (8000cb4 <HAL_GPIO_Init+0x2a0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d05e      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a50:	4a98      	ldr	r2, [pc, #608]	; (8000cb4 <HAL_GPIO_Init+0x2a0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d875      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a56:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d058      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a5c:	4a96      	ldr	r2, [pc, #600]	; (8000cb8 <HAL_GPIO_Init+0x2a4>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d86f      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a62:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a8>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d052      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a68:	4a94      	ldr	r2, [pc, #592]	; (8000cbc <HAL_GPIO_Init+0x2a8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d869      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2ac>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d04c      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a74:	4a92      	ldr	r2, [pc, #584]	; (8000cc0 <HAL_GPIO_Init+0x2ac>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d863      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a7a:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d046      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
 8000a80:	4a90      	ldr	r2, [pc, #576]	; (8000cc4 <HAL_GPIO_Init+0x2b0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d85d      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a86:	2b12      	cmp	r3, #18
 8000a88:	d82a      	bhi.n	8000ae0 <HAL_GPIO_Init+0xcc>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d859      	bhi.n	8000b42 <HAL_GPIO_Init+0x12e>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <HAL_GPIO_Init+0x80>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000afb 	.word	0x08000afb
 8000aa0:	08000b3d 	.word	0x08000b3d
 8000aa4:	08000b43 	.word	0x08000b43
 8000aa8:	08000b43 	.word	0x08000b43
 8000aac:	08000b43 	.word	0x08000b43
 8000ab0:	08000b43 	.word	0x08000b43
 8000ab4:	08000b43 	.word	0x08000b43
 8000ab8:	08000b43 	.word	0x08000b43
 8000abc:	08000b43 	.word	0x08000b43
 8000ac0:	08000b43 	.word	0x08000b43
 8000ac4:	08000b43 	.word	0x08000b43
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b43 	.word	0x08000b43
 8000ad0:	08000b43 	.word	0x08000b43
 8000ad4:	08000b43 	.word	0x08000b43
 8000ad8:	08000af1 	.word	0x08000af1
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <HAL_GPIO_Init+0x2b4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ae6:	e02c      	b.n	8000b42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e029      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e024      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e01f      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e01a      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b16:	2304      	movs	r3, #4
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e013      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d105      	bne.n	8000b30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	611a      	str	r2, [r3, #16]
          break;
 8000b2e:	e009      	b.n	8000b44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	615a      	str	r2, [r3, #20]
          break;
 8000b3a:	e003      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x130>
          break;
 8000b42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2bff      	cmp	r3, #255	; 0xff
 8000b48:	d801      	bhi.n	8000b4e <HAL_GPIO_Init+0x13a>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	e001      	b.n	8000b52 <HAL_GPIO_Init+0x13e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d802      	bhi.n	8000b60 <HAL_GPIO_Init+0x14c>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x152>
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	3b08      	subs	r3, #8
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	401a      	ands	r2, r3
 8000b78:	6a39      	ldr	r1, [r7, #32]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b94:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_GPIO_Init+0x2b8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bac:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <HAL_GPIO_Init+0x2bc>)
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_GPIO_Init+0x2c0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d013      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3f      	ldr	r2, [pc, #252]	; (8000cd8 <HAL_GPIO_Init+0x2c4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <HAL_GPIO_Init+0x2c8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <HAL_GPIO_Init+0x2cc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_GPIO_Init+0x1e0>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	e004      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e002      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <HAL_GPIO_Init+0x1ee>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	f002 0203 	and.w	r2, r2, #3
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c12:	492f      	ldr	r1, [pc, #188]	; (8000cd0 <HAL_GPIO_Init+0x2bc>)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	492c      	ldr	r1, [pc, #176]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4928      	ldr	r1, [pc, #160]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c54:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	4922      	ldr	r1, [pc, #136]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60cb      	str	r3, [r1, #12]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	491e      	ldr	r1, [pc, #120]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4918      	ldr	r1, [pc, #96]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	604b      	str	r3, [r1, #4]
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d021      	beq.n	8000ce8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	600b      	str	r3, [r1, #0]
 8000cb0:	e021      	b.n	8000cf6 <HAL_GPIO_Init+0x2e2>
 8000cb2:	bf00      	nop
 8000cb4:	10320000 	.word	0x10320000
 8000cb8:	10310000 	.word	0x10310000
 8000cbc:	10220000 	.word	0x10220000
 8000cc0:	10210000 	.word	0x10210000
 8000cc4:	10120000 	.word	0x10120000
 8000cc8:	10110000 	.word	0x10110000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_GPIO_Init+0x304>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4909      	ldr	r1, [pc, #36]	; (8000d18 <HAL_GPIO_Init+0x304>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	fa22 f303 	lsr.w	r3, r2, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f47f ae8e 	bne.w	8000a28 <HAL_GPIO_Init+0x14>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	372c      	adds	r7, #44	; 0x2c
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d38:	e003      	b.n	8000d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	041a      	lsls	r2, r3, #16
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	611a      	str	r2, [r3, #16]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f806 	bl	8000d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e272      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8087 	beq.w	8000ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db0:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00c      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dbc:	4b8f      	ldr	r3, [pc, #572]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d112      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
 8000dc8:	4b8c      	ldr	r3, [pc, #560]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d10b      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd6:	4b89      	ldr	r3, [pc, #548]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d06c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x12c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d168      	bne.n	8000ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e24c      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x76>
 8000df8:	4b80      	ldr	r3, [pc, #512]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a7f      	ldr	r2, [pc, #508]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e02e      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x98>
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a77      	ldr	r2, [pc, #476]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e01d      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0xbc>
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6e      	ldr	r2, [pc, #440]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00b      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e4c:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a67      	ldr	r2, [pc, #412]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc96 	bl	800079c <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fc92 	bl	800079c <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e200      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0xe4>
 8000e92:	e014      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc82 	bl	800079c <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fc7e 	bl	800079c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e1ec      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x10c>
 8000eba:	e000      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d063      	beq.n	8000f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d11c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d116      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e1c0      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4939      	ldr	r1, [pc, #228]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e03a      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d020      	beq.n	8000f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fc37 	bl	800079c <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc33 	bl	800079c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1a1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4927      	ldr	r1, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
 8000f64:	e015      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fc16 	bl	800079c <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc12 	bl	800079c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e180      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d03a      	beq.n	8001014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d019      	beq.n	8000fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fbf6 	bl	800079c <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbf2 	bl	800079c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e160      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 face 	bl	8001574 <RCC_Delay>
 8000fd8:	e01c      	b.n	8001014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fbdc 	bl	800079c <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe6:	e00f      	b.n	8001008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fbd8 	bl	800079c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d908      	bls.n	8001008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e146      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	42420000 	.word	0x42420000
 8001004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e9      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a6 	beq.w	800116e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a87      	ldr	r2, [pc, #540]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b85      	ldr	r3, [pc, #532]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7e      	ldr	r2, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb99 	bl	800079c <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106e:	f7ff fb95 	bl	800079c <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e103      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x312>
 8001094:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e02d      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x334>
 80010aa:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	e01c      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x356>
 80010cc:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a60      	ldr	r2, [pc, #384]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a5d      	ldr	r2, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6213      	str	r3, [r2, #32]
 80010e4:	e00b      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a5a      	ldr	r2, [pc, #360]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a57      	ldr	r2, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d015      	beq.n	8001132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fb49 	bl	800079c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff fb45 	bl	800079c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	; 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e0b1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ee      	beq.n	800110e <HAL_RCC_OscConfig+0x37e>
 8001130:	e014      	b.n	800115c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fb33 	bl	800079c <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fb2f 	bl	800079c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e09b      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ee      	bne.n	800113a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d105      	bne.n	800116e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d061      	beq.n	8001248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d146      	bne.n	800121a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fb03 	bl	800079c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff faff 	bl	800079c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e06d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d108      	bne.n	80011d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a19      	ldr	r1, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	430b      	orrs	r3, r1
 80011e6:	491b      	ldr	r1, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fad3 	bl	800079c <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff facf 	bl	800079c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e03d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x46a>
 8001218:	e035      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fabc 	bl	800079c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fab8 	bl	800079c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e026      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x498>
 8001246:	e01e      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e019      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x500>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0d0      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d910      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	4965      	ldr	r1, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d040      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e073      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e06b      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4936      	ldr	r1, [pc, #216]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001384:	f7ff fa0a 	bl	800079c <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff fa06 	bl	800079c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e053      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d210      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 0207 	bic.w	r2, r3, #7
 80013ca:	4922      	ldr	r1, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f821 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c8>)
 8001434:	5ccb      	ldrb	r3, [r1, r3]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1cc>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f968 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000
 8001458:	40021000 	.word	0x40021000
 800145c:	08004020 	.word	0x08004020
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b04      	cmp	r3, #4
 8001490:	d002      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x30>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d003      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0x36>
 8001496:	e027      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 800149a:	613b      	str	r3, [r7, #16]
      break;
 800149c:	e027      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0c9b      	lsrs	r3, r3, #18
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d010      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetSysClockFreq+0x94>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0c5b      	lsrs	r3, r3, #17
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e004      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	613b      	str	r3, [r7, #16]
      break;
 80014e6:	e002      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ea:	613b      	str	r3, [r7, #16]
      break;
 80014ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ee:	693b      	ldr	r3, [r7, #16]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	007a1200 	.word	0x007a1200
 8001504:	08004038 	.word	0x08004038
 8001508:	08004048 	.word	0x08004048
 800150c:	003d0900 	.word	0x003d0900

08001510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_RCC_GetHCLKFreq+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001528:	f7ff fff2 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	08004030 	.word	0x08004030

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff ffde 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0adb      	lsrs	r3, r3, #11
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	08004030 	.word	0x08004030

08001574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <RCC_Delay+0x34>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <RCC_Delay+0x38>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001590:	bf00      	nop
  }
  while (Delay --);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	60fa      	str	r2, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <RCC_Delay+0x1c>
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000000 	.word	0x20000000
 80015ac:	10624dd3 	.word	0x10624dd3

080015b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e041      	b.n	8001646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe ff5a 	bl	8000490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3304      	adds	r3, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f000 fbde 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e041      	b.n	80016e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f839 	bl	80016ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4610      	mov	r0, r2
 800168e:	f000 fb8f 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_TIM_PWM_Start+0x24>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e022      	b.n	800176a <HAL_TIM_PWM_Start+0x6a>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d109      	bne.n	800173e <HAL_TIM_PWM_Start+0x3e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	e015      	b.n	800176a <HAL_TIM_PWM_Start+0x6a>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d109      	bne.n	8001758 <HAL_TIM_PWM_Start+0x58>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e008      	b.n	800176a <HAL_TIM_PWM_Start+0x6a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	bf14      	ite	ne
 8001764:	2301      	movne	r3, #1
 8001766:	2300      	moveq	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e05e      	b.n	8001830 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <HAL_TIM_PWM_Start+0x82>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001780:	e013      	b.n	80017aa <HAL_TIM_PWM_Start+0xaa>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d104      	bne.n	8001792 <HAL_TIM_PWM_Start+0x92>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001790:	e00b      	b.n	80017aa <HAL_TIM_PWM_Start+0xaa>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d104      	bne.n	80017a2 <HAL_TIM_PWM_Start+0xa2>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017a0:	e003      	b.n	80017aa <HAL_TIM_PWM_Start+0xaa>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 fd7c 	bl	80022b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_TIM_PWM_Start+0x138>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d107      	bne.n	80017d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_TIM_PWM_Start+0x138>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00e      	beq.n	80017fa <HAL_TIM_PWM_Start+0xfa>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d009      	beq.n	80017fa <HAL_TIM_PWM_Start+0xfa>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_PWM_Start+0x13c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d004      	beq.n	80017fa <HAL_TIM_PWM_Start+0xfa>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_TIM_PWM_Start+0x140>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d111      	bne.n	800181e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b06      	cmp	r3, #6
 800180a:	d010      	beq.n	800182e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181c:	e007      	b.n	800182e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40012c00 	.word	0x40012c00
 800183c:	40000400 	.word	0x40000400
 8001840:	40000800 	.word	0x40000800

08001844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d122      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b02      	cmp	r3, #2
 8001866:	d11b      	bne.n	80018a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fa76 	bl	8001d78 <HAL_TIM_IC_CaptureCallback>
 800188c:	e005      	b.n	800189a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fa69 	bl	8001d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fa78 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d122      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d11b      	bne.n	80018f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0204 	mvn.w	r2, #4
 80018c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2202      	movs	r2, #2
 80018ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa4c 	bl	8001d78 <HAL_TIM_IC_CaptureCallback>
 80018e0:	e005      	b.n	80018ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fa3f 	bl	8001d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fa4e 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d122      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b08      	cmp	r3, #8
 800190e:	d11b      	bne.n	8001948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0208 	mvn.w	r2, #8
 8001918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fa22 	bl	8001d78 <HAL_TIM_IC_CaptureCallback>
 8001934:	e005      	b.n	8001942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa15 	bl	8001d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fa24 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b10      	cmp	r3, #16
 8001954:	d122      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d11b      	bne.n	800199c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0210 	mvn.w	r2, #16
 800196c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f9f8 	bl	8001d78 <HAL_TIM_IC_CaptureCallback>
 8001988:	e005      	b.n	8001996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9eb 	bl	8001d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f9fa 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0201 	mvn.w	r2, #1
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fedc 	bl	8002780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fce9 	bl	80023c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f9be 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0220 	mvn.w	r2, #32
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fcb4 	bl	80023b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e0ae      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f200 809f 	bhi.w	8001bc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a82:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001abd 	.word	0x08001abd
 8001a8c:	08001bc1 	.word	0x08001bc1
 8001a90:	08001bc1 	.word	0x08001bc1
 8001a94:	08001bc1 	.word	0x08001bc1
 8001a98:	08001afd 	.word	0x08001afd
 8001a9c:	08001bc1 	.word	0x08001bc1
 8001aa0:	08001bc1 	.word	0x08001bc1
 8001aa4:	08001bc1 	.word	0x08001bc1
 8001aa8:	08001b3f 	.word	0x08001b3f
 8001aac:	08001bc1 	.word	0x08001bc1
 8001ab0:	08001bc1 	.word	0x08001bc1
 8001ab4:	08001bc1 	.word	0x08001bc1
 8001ab8:	08001b7f 	.word	0x08001b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f9d6 	bl	8001e74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0208 	orr.w	r2, r2, #8
 8001ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0204 	bic.w	r2, r2, #4
 8001ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6999      	ldr	r1, [r3, #24]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	619a      	str	r2, [r3, #24]
      break;
 8001afa:	e064      	b.n	8001bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa1c 	bl	8001f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6999      	ldr	r1, [r3, #24]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	021a      	lsls	r2, r3, #8
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
      break;
 8001b3c:	e043      	b.n	8001bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fa65 	bl	8002014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69da      	ldr	r2, [r3, #28]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0208 	orr.w	r2, r2, #8
 8001b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0204 	bic.w	r2, r2, #4
 8001b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69d9      	ldr	r1, [r3, #28]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	61da      	str	r2, [r3, #28]
      break;
 8001b7c:	e023      	b.n	8001bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 faaf 	bl	80020e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69d9      	ldr	r1, [r3, #28]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	61da      	str	r2, [r3, #28]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8001bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e0b4      	b.n	8001d5e <HAL_TIM_ConfigClockSource+0x186>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2c:	d03e      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0xd4>
 8001c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c32:	f200 8087 	bhi.w	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3a:	f000 8086 	beq.w	8001d4a <HAL_TIM_ConfigClockSource+0x172>
 8001c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c42:	d87f      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c44:	2b70      	cmp	r3, #112	; 0x70
 8001c46:	d01a      	beq.n	8001c7e <HAL_TIM_ConfigClockSource+0xa6>
 8001c48:	2b70      	cmp	r3, #112	; 0x70
 8001c4a:	d87b      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c4c:	2b60      	cmp	r3, #96	; 0x60
 8001c4e:	d050      	beq.n	8001cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8001c50:	2b60      	cmp	r3, #96	; 0x60
 8001c52:	d877      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c54:	2b50      	cmp	r3, #80	; 0x50
 8001c56:	d03c      	beq.n	8001cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8001c58:	2b50      	cmp	r3, #80	; 0x50
 8001c5a:	d873      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d058      	beq.n	8001d12 <HAL_TIM_ConfigClockSource+0x13a>
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d86f      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c64:	2b30      	cmp	r3, #48	; 0x30
 8001c66:	d064      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x15a>
 8001c68:	2b30      	cmp	r3, #48	; 0x30
 8001c6a:	d86b      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d060      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x15a>
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d867      	bhi.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05c      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x15a>
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d05a      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0x15a>
 8001c7c:	e062      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c8e:	f000 faf0 	bl	8002272 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	609a      	str	r2, [r3, #8]
      break;
 8001caa:	e04f      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cbc:	f000 fad9 	bl	8002272 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cce:	609a      	str	r2, [r3, #8]
      break;
 8001cd0:	e03c      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f000 fa50 	bl	8002184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2150      	movs	r1, #80	; 0x50
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 faa7 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001cf0:	e02c      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f000 fa6e 	bl	80021e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2160      	movs	r1, #96	; 0x60
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fa97 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001d10:	e01c      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f000 fa30 	bl	8002184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2140      	movs	r1, #64	; 0x40
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa87 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001d30:	e00c      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f000 fa7e 	bl	800223e <TIM_ITRx_SetConfig>
      break;
 8001d42:	e003      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
      break;
 8001d48:	e000      	b.n	8001d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
	...

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d007      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <TIM_Base_SetConfig+0xbc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <TIM_Base_SetConfig+0xc0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d007      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <TIM_Base_SetConfig+0xbc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <TIM_Base_SetConfig+0xc0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d108      	bne.n	8001e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <TIM_Base_SetConfig+0xb8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40000800 	.word	0x40000800

08001e74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f023 0201 	bic.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f023 0302 	bic.w	r3, r3, #2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <TIM_OC1_SetConfig+0xc8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10c      	bne.n	8001eea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 0308 	bic.w	r3, r3, #8
 8001ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <TIM_OC1_SetConfig+0xc8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d111      	bne.n	8001f16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	621a      	str	r2, [r3, #32]
}
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00

08001f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f023 0210 	bic.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f023 0320 	bic.w	r3, r3, #32
 8001f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <TIM_OC2_SetConfig+0xd0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10d      	bne.n	8001fbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <TIM_OC2_SetConfig+0xd0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d113      	bne.n	8001fec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	621a      	str	r2, [r3, #32]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40012c00 	.word	0x40012c00

08002014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800205c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <TIM_OC3_SetConfig+0xd0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10d      	bne.n	800208e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800208c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <TIM_OC3_SetConfig+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d113      	bne.n	80020be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800209c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	621a      	str	r2, [r3, #32]
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40012c00 	.word	0x40012c00

080020e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	031b      	lsls	r3, r3, #12
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <TIM_OC4_SetConfig+0x98>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d109      	bne.n	800215c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012c00 	.word	0x40012c00

08002184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f023 030a 	bic.w	r3, r3, #10
 80021c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	621a      	str	r2, [r3, #32]
}
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f023 0210 	bic.w	r2, r3, #16
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800220a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	031b      	lsls	r3, r3, #12
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800221c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	f043 0307 	orr.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800228c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	021a      	lsls	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	431a      	orrs	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4313      	orrs	r3, r2
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	609a      	str	r2, [r3, #8]
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2201      	movs	r2, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
}
 80022ee:	bf00      	nop
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800230c:	2302      	movs	r3, #2
 800230e:	e046      	b.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d009      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10c      	bne.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4313      	orrs	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800

080023b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e042      	b.n	8002470 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe f89a 	bl	8000538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	; 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f82b 	bl	8002478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024b2:	f023 030c 	bic.w	r3, r3, #12
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	430b      	orrs	r3, r1
 80024be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <UART_SetConfig+0x114>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d103      	bne.n	80024e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024e0:	f7ff f834 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	e002      	b.n	80024ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024e8:	f7ff f81c 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 80024ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	4a22      	ldr	r2, [pc, #136]	; (8002590 <UART_SetConfig+0x118>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	0119      	lsls	r1, r3, #4
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	009a      	lsls	r2, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fbb2 f2f3 	udiv	r2, r2, r3
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <UART_SetConfig+0x118>)
 8002526:	fba3 0302 	umull	r0, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2064      	movs	r0, #100	; 0x64
 800252e:	fb00 f303 	mul.w	r3, r0, r3
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	3332      	adds	r3, #50	; 0x32
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <UART_SetConfig+0x118>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	4419      	add	r1, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fbb2 f2f3 	udiv	r2, r2, r3
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <UART_SetConfig+0x118>)
 800255e:	fba3 0302 	umull	r0, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2064      	movs	r0, #100	; 0x64
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	3332      	adds	r3, #50	; 0x32
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <UART_SetConfig+0x118>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	f003 020f 	and.w	r2, r3, #15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	440a      	add	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40013800 	.word	0x40013800
 8002590:	51eb851f 	.word	0x51eb851f

08002594 <app_init>:
uint32_t g_app_cnt;
volatile uint32_t g_tick_cnt;

/********************** external functions definition ************************/
void app_init(void)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b083      	sub	sp, #12
 8002598:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800259a:	b672      	cpsid	i
 800259c:	4b34      	ldr	r3, [pc, #208]	; (8002670 <app_init+0xdc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a34      	ldr	r2, [pc, #208]	; (8002674 <app_init+0xe0>)
 80025a2:	213f      	movs	r1, #63	; 0x3f
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fd37 	bl	8003018 <sniprintf>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a32      	ldr	r2, [pc, #200]	; (8002678 <app_init+0xe4>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <app_init+0xdc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f8ed 	bl	8002794 <logger_log_print_>
 80025ba:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80025bc:	b672      	cpsid	i
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <app_init+0xdc>)
 80025c0:	681c      	ldr	r4, [r3, #0]
 80025c2:	f7fe f8eb 	bl	800079c <HAL_GetTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <app_init+0xe8>)
 80025cc:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <app_init+0xec>)
 80025ce:	213f      	movs	r1, #63	; 0x3f
 80025d0:	4620      	mov	r0, r4
 80025d2:	f000 fd21 	bl	8003018 <sniprintf>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <app_init+0xe4>)
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <app_init+0xdc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f8d7 	bl	8002794 <logger_log_print_>
 80025e6:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80025e8:	b672      	cpsid	i
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <app_init+0xdc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a25      	ldr	r2, [pc, #148]	; (8002684 <app_init+0xf0>)
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	213f      	movs	r1, #63	; 0x3f
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fd0f 	bl	8003018 <sniprintf>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <app_init+0xe4>)
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <app_init+0xdc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f8c5 	bl	8002794 <logger_log_print_>
 800260a:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 800260c:	b672      	cpsid	i
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <app_init+0xdc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <app_init+0xf4>)
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	213f      	movs	r1, #63	; 0x3f
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fcfd 	bl	8003018 <sniprintf>
 800261e:	4603      	mov	r3, r0
 8002620:	4a15      	ldr	r2, [pc, #84]	; (8002678 <app_init+0xe4>)
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <app_init+0xdc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f8b3 	bl	8002794 <logger_log_print_>
 800262e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <app_init+0xf8>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8002636:	b672      	cpsid	i
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <app_init+0xdc>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <app_init+0xf8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <app_init+0xfc>)
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <app_init+0x100>)
 8002646:	213f      	movs	r1, #63	; 0x3f
 8002648:	f000 fce6 	bl	8003018 <sniprintf>
 800264c:	4603      	mov	r3, r0
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <app_init+0xe4>)
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <app_init+0xdc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f89c 	bl	8002794 <logger_log_print_>
 800265c:	b662      	cpsie	i

	/* Start timer */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800265e:	2100      	movs	r1, #0
 8002660:	480d      	ldr	r0, [pc, #52]	; (8002698 <app_init+0x104>)
 8002662:	f7ff f84d 	bl	8001700 <HAL_TIM_PWM_Start>
}
 8002666:	bf00      	nop
 8002668:	3704      	adds	r7, #4
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	0800404c 	.word	0x0800404c
 8002674:	08003fc8 	.word	0x08003fc8
 8002678:	20000170 	.word	0x20000170
 800267c:	08003fcc 	.word	0x08003fcc
 8002680:	08003fd8 	.word	0x08003fd8
 8002684:	2000000c 	.word	0x2000000c
 8002688:	20000010 	.word	0x20000010
 800268c:	2000012c 	.word	0x2000012c
 8002690:	08003ffc 	.word	0x08003ffc
 8002694:	08004008 	.word	0x08004008
 8002698:	20000094 	.word	0x20000094

0800269c <app_update>:
 *   DutyCyclepwm [%] = (CCRX / ARR) [%]
 *
 *   CCRX = 0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200
 */
void app_update(void)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b085      	sub	sp, #20
 80026a0:	af02      	add	r7, sp, #8
	uint32_t duty_cycle = DUTY_CYCLE_MAX;
 80026a2:	23c8      	movs	r3, #200	; 0xc8
 80026a4:	607b      	str	r3, [r7, #4]

	/* Update App Counter */
	g_app_cnt++;
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <app_update+0xc4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <app_update+0xc4>)
 80026ae:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("\r\n");
 80026b0:	b672      	cpsid	i
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <app_update+0xc8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <app_update+0xcc>)
 80026b8:	213f      	movs	r1, #63	; 0x3f
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fcac 	bl	8003018 <sniprintf>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a2a      	ldr	r2, [pc, #168]	; (800276c <app_update+0xd0>)
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <app_update+0xc8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f862 	bl	8002794 <logger_log_print_>
 80026d0:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_update), (int)HAL_GetTick());
 80026d2:	b672      	cpsid	i
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <app_update+0xc8>)
 80026d6:	681c      	ldr	r4, [r3, #0]
 80026d8:	f7fe f860 	bl	800079c <HAL_GetTick>
 80026dc:	4603      	mov	r3, r0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <app_update+0xd4>)
 80026e2:	4a24      	ldr	r2, [pc, #144]	; (8002774 <app_update+0xd8>)
 80026e4:	213f      	movs	r1, #63	; 0x3f
 80026e6:	4620      	mov	r0, r4
 80026e8:	f000 fc96 	bl	8003018 <sniprintf>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <app_update+0xd0>)
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <app_update+0xc8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f84c 	bl	8002794 <logger_log_print_>
 80026fc:	b662      	cpsie	i

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80026fe:	b672      	cpsid	i
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <app_update+0xc8>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <app_update+0xc4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <app_update+0xdc>)
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <app_update+0xe0>)
 800270e:	213f      	movs	r1, #63	; 0x3f
 8002710:	f000 fc82 	bl	8003018 <sniprintf>
 8002714:	4603      	mov	r3, r0
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <app_update+0xd0>)
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <app_update+0xc8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f838 	bl	8002794 <logger_log_print_>
 8002724:	b662      	cpsie	i

	for (;;)
	{
        while (DUTY_CYCLE_MAX > duty_cycle)
 8002726:	e009      	b.n	800273c <app_update+0xa0>
        {
            TIM2->CCR1 = duty_cycle;
 8002728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6353      	str	r3, [r2, #52]	; 0x34
            duty_cycle += DUTY_CYCLE_INC;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3314      	adds	r3, #20
 8002734:	607b      	str	r3, [r7, #4]
            HAL_Delay(100);
 8002736:	2064      	movs	r0, #100	; 0x64
 8002738:	f7fe f83a 	bl	80007b0 <HAL_Delay>
        while (DUTY_CYCLE_MAX > duty_cycle)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2bc7      	cmp	r3, #199	; 0xc7
 8002740:	d9f2      	bls.n	8002728 <app_update+0x8c>
        }
        while (DUTY_CYCLE_MIN < duty_cycle)
 8002742:	e009      	b.n	8002758 <app_update+0xbc>
        {
            TIM2->CCR1 = duty_cycle;
 8002744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6353      	str	r3, [r2, #52]	; 0x34
            duty_cycle -= DUTY_CYCLE_INC;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b14      	subs	r3, #20
 8002750:	607b      	str	r3, [r7, #4]
            HAL_Delay(100);
 8002752:	2064      	movs	r0, #100	; 0x64
 8002754:	f7fe f82c 	bl	80007b0 <HAL_Delay>
        while (DUTY_CYCLE_MIN < duty_cycle)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f2      	bne.n	8002744 <app_update+0xa8>
        while (DUTY_CYCLE_MAX > duty_cycle)
 800275e:	e7ed      	b.n	800273c <app_update+0xa0>
 8002760:	2000012c 	.word	0x2000012c
 8002764:	0800404c 	.word	0x0800404c
 8002768:	08003fc8 	.word	0x08003fc8
 800276c:	20000170 	.word	0x20000170
 8002770:	08004014 	.word	0x08004014
 8002774:	08003fd8 	.word	0x08003fd8
 8002778:	08003ffc 	.word	0x08003ffc
 800277c:	08004008 	.word	0x08004008

08002780 <HAL_TIM_PeriodElapsedCallback>:
	g_tick_cnt++;
}

/* Callback in non blocking modes (Interrupt and DMA) */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim2 )
  {
  }
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
	...

08002794 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fc29 	bl	8002ff4 <iprintf>
	fflush(stdout);
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <logger_log_print_+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fb4d 	bl	8002e48 <fflush>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000074 	.word	0x20000074

080027bc <findslot>:
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <findslot+0x2c>)
 80027be:	b510      	push	{r4, lr}
 80027c0:	4604      	mov	r4, r0
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	b118      	cbz	r0, 80027ce <findslot+0x12>
 80027c6:	6a03      	ldr	r3, [r0, #32]
 80027c8:	b90b      	cbnz	r3, 80027ce <findslot+0x12>
 80027ca:	f000 fbdd 	bl	8002f88 <__sinit>
 80027ce:	2c13      	cmp	r4, #19
 80027d0:	d807      	bhi.n	80027e2 <findslot+0x26>
 80027d2:	4806      	ldr	r0, [pc, #24]	; (80027ec <findslot+0x30>)
 80027d4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80027d8:	3201      	adds	r2, #1
 80027da:	d002      	beq.n	80027e2 <findslot+0x26>
 80027dc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	2000      	movs	r0, #0
 80027e4:	e7fc      	b.n	80027e0 <findslot+0x24>
 80027e6:	bf00      	nop
 80027e8:	20000074 	.word	0x20000074
 80027ec:	20000180 	.word	0x20000180

080027f0 <error>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	4604      	mov	r4, r0
 80027f4:	f000 fcd6 	bl	80031a4 <__errno>
 80027f8:	2613      	movs	r6, #19
 80027fa:	4605      	mov	r5, r0
 80027fc:	2700      	movs	r7, #0
 80027fe:	4630      	mov	r0, r6
 8002800:	4639      	mov	r1, r7
 8002802:	beab      	bkpt	0x00ab
 8002804:	4606      	mov	r6, r0
 8002806:	4620      	mov	r0, r4
 8002808:	602e      	str	r6, [r5, #0]
 800280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800280c <checkerror>:
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d101      	bne.n	8002814 <checkerror+0x8>
 8002810:	f7ff bfee 	b.w	80027f0 <error>
 8002814:	4770      	bx	lr

08002816 <_swiread>:
 8002816:	b530      	push	{r4, r5, lr}
 8002818:	b085      	sub	sp, #20
 800281a:	2406      	movs	r4, #6
 800281c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002820:	9203      	str	r2, [sp, #12]
 8002822:	ad01      	add	r5, sp, #4
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	beab      	bkpt	0x00ab
 800282a:	4604      	mov	r4, r0
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ffed 	bl	800280c <checkerror>
 8002832:	b005      	add	sp, #20
 8002834:	bd30      	pop	{r4, r5, pc}

08002836 <_read>:
 8002836:	b570      	push	{r4, r5, r6, lr}
 8002838:	460e      	mov	r6, r1
 800283a:	4615      	mov	r5, r2
 800283c:	f7ff ffbe 	bl	80027bc <findslot>
 8002840:	4604      	mov	r4, r0
 8002842:	b930      	cbnz	r0, 8002852 <_read+0x1c>
 8002844:	f000 fcae 	bl	80031a4 <__errno>
 8002848:	2309      	movs	r3, #9
 800284a:	6003      	str	r3, [r0, #0]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	bd70      	pop	{r4, r5, r6, pc}
 8002852:	462a      	mov	r2, r5
 8002854:	4631      	mov	r1, r6
 8002856:	6800      	ldr	r0, [r0, #0]
 8002858:	f7ff ffdd 	bl	8002816 <_swiread>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	bf1f      	itttt	ne
 8002860:	6863      	ldrne	r3, [r4, #4]
 8002862:	1a28      	subne	r0, r5, r0
 8002864:	181b      	addne	r3, r3, r0
 8002866:	6063      	strne	r3, [r4, #4]
 8002868:	e7f2      	b.n	8002850 <_read+0x1a>

0800286a <_swilseek>:
 800286a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800286c:	460c      	mov	r4, r1
 800286e:	4616      	mov	r6, r2
 8002870:	f7ff ffa4 	bl	80027bc <findslot>
 8002874:	4605      	mov	r5, r0
 8002876:	b940      	cbnz	r0, 800288a <_swilseek+0x20>
 8002878:	f000 fc94 	bl	80031a4 <__errno>
 800287c:	2309      	movs	r3, #9
 800287e:	6003      	str	r3, [r0, #0]
 8002880:	f04f 34ff 	mov.w	r4, #4294967295
 8002884:	4620      	mov	r0, r4
 8002886:	b003      	add	sp, #12
 8002888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288a:	2e02      	cmp	r6, #2
 800288c:	d903      	bls.n	8002896 <_swilseek+0x2c>
 800288e:	f000 fc89 	bl	80031a4 <__errno>
 8002892:	2316      	movs	r3, #22
 8002894:	e7f3      	b.n	800287e <_swilseek+0x14>
 8002896:	2e01      	cmp	r6, #1
 8002898:	d112      	bne.n	80028c0 <_swilseek+0x56>
 800289a:	6843      	ldr	r3, [r0, #4]
 800289c:	18e4      	adds	r4, r4, r3
 800289e:	d4f6      	bmi.n	800288e <_swilseek+0x24>
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	260a      	movs	r6, #10
 80028a4:	466f      	mov	r7, sp
 80028a6:	e9cd 3400 	strd	r3, r4, [sp]
 80028aa:	4630      	mov	r0, r6
 80028ac:	4639      	mov	r1, r7
 80028ae:	beab      	bkpt	0x00ab
 80028b0:	4606      	mov	r6, r0
 80028b2:	4630      	mov	r0, r6
 80028b4:	f7ff ffaa 	bl	800280c <checkerror>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	dbe1      	blt.n	8002880 <_swilseek+0x16>
 80028bc:	606c      	str	r4, [r5, #4]
 80028be:	e7e1      	b.n	8002884 <_swilseek+0x1a>
 80028c0:	2e02      	cmp	r6, #2
 80028c2:	6803      	ldr	r3, [r0, #0]
 80028c4:	d1ec      	bne.n	80028a0 <_swilseek+0x36>
 80028c6:	260c      	movs	r6, #12
 80028c8:	466f      	mov	r7, sp
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4630      	mov	r0, r6
 80028ce:	4639      	mov	r1, r7
 80028d0:	beab      	bkpt	0x00ab
 80028d2:	4606      	mov	r6, r0
 80028d4:	4630      	mov	r0, r6
 80028d6:	f7ff ff99 	bl	800280c <checkerror>
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	d0d0      	beq.n	8002880 <_swilseek+0x16>
 80028de:	4404      	add	r4, r0
 80028e0:	e7de      	b.n	80028a0 <_swilseek+0x36>

080028e2 <_lseek>:
 80028e2:	f7ff bfc2 	b.w	800286a <_swilseek>

080028e6 <_swiwrite>:
 80028e6:	b530      	push	{r4, r5, lr}
 80028e8:	b085      	sub	sp, #20
 80028ea:	2405      	movs	r4, #5
 80028ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80028f0:	9203      	str	r2, [sp, #12]
 80028f2:	ad01      	add	r5, sp, #4
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	beab      	bkpt	0x00ab
 80028fa:	4604      	mov	r4, r0
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7ff ff85 	bl	800280c <checkerror>
 8002902:	b005      	add	sp, #20
 8002904:	bd30      	pop	{r4, r5, pc}

08002906 <_write>:
 8002906:	b570      	push	{r4, r5, r6, lr}
 8002908:	460e      	mov	r6, r1
 800290a:	4615      	mov	r5, r2
 800290c:	f7ff ff56 	bl	80027bc <findslot>
 8002910:	4604      	mov	r4, r0
 8002912:	b930      	cbnz	r0, 8002922 <_write+0x1c>
 8002914:	f000 fc46 	bl	80031a4 <__errno>
 8002918:	2309      	movs	r3, #9
 800291a:	6003      	str	r3, [r0, #0]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	462a      	mov	r2, r5
 8002924:	4631      	mov	r1, r6
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	f7ff ffdd 	bl	80028e6 <_swiwrite>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	dbf5      	blt.n	800291c <_write+0x16>
 8002930:	6862      	ldr	r2, [r4, #4]
 8002932:	1ae8      	subs	r0, r5, r3
 8002934:	4402      	add	r2, r0
 8002936:	42ab      	cmp	r3, r5
 8002938:	6062      	str	r2, [r4, #4]
 800293a:	d1f1      	bne.n	8002920 <_write+0x1a>
 800293c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002940:	2000      	movs	r0, #0
 8002942:	f7ff bf55 	b.w	80027f0 <error>

08002946 <_swiclose>:
 8002946:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002948:	2402      	movs	r4, #2
 800294a:	9001      	str	r0, [sp, #4]
 800294c:	ad01      	add	r5, sp, #4
 800294e:	4620      	mov	r0, r4
 8002950:	4629      	mov	r1, r5
 8002952:	beab      	bkpt	0x00ab
 8002954:	4604      	mov	r4, r0
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff ff58 	bl	800280c <checkerror>
 800295c:	b003      	add	sp, #12
 800295e:	bd30      	pop	{r4, r5, pc}

08002960 <_close>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	4605      	mov	r5, r0
 8002964:	f7ff ff2a 	bl	80027bc <findslot>
 8002968:	4604      	mov	r4, r0
 800296a:	b930      	cbnz	r0, 800297a <_close+0x1a>
 800296c:	f000 fc1a 	bl	80031a4 <__errno>
 8002970:	2309      	movs	r3, #9
 8002972:	6003      	str	r3, [r0, #0]
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	bd38      	pop	{r3, r4, r5, pc}
 800297a:	3d01      	subs	r5, #1
 800297c:	2d01      	cmp	r5, #1
 800297e:	d809      	bhi.n	8002994 <_close+0x34>
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <_close+0x48>)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	429a      	cmp	r2, r3
 8002988:	d104      	bne.n	8002994 <_close+0x34>
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	6003      	str	r3, [r0, #0]
 8002990:	2000      	movs	r0, #0
 8002992:	e7f1      	b.n	8002978 <_close+0x18>
 8002994:	6820      	ldr	r0, [r4, #0]
 8002996:	f7ff ffd6 	bl	8002946 <_swiclose>
 800299a:	2800      	cmp	r0, #0
 800299c:	d1ec      	bne.n	8002978 <_close+0x18>
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	e7e8      	b.n	8002978 <_close+0x18>
 80029a6:	bf00      	nop
 80029a8:	20000180 	.word	0x20000180

080029ac <_swistat>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	f7ff ff04 	bl	80027bc <findslot>
 80029b4:	4605      	mov	r5, r0
 80029b6:	b930      	cbnz	r0, 80029c6 <_swistat+0x1a>
 80029b8:	f000 fbf4 	bl	80031a4 <__errno>
 80029bc:	2309      	movs	r3, #9
 80029be:	6003      	str	r3, [r0, #0]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
 80029c6:	6863      	ldr	r3, [r4, #4]
 80029c8:	260c      	movs	r6, #12
 80029ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ce:	6063      	str	r3, [r4, #4]
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80029d6:	4630      	mov	r0, r6
 80029d8:	4629      	mov	r1, r5
 80029da:	beab      	bkpt	0x00ab
 80029dc:	4605      	mov	r5, r0
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff ff14 	bl	800280c <checkerror>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	bf1c      	itt	ne
 80029e8:	6120      	strne	r0, [r4, #16]
 80029ea:	2000      	movne	r0, #0
 80029ec:	e7ea      	b.n	80029c4 <_swistat+0x18>

080029ee <_fstat>:
 80029ee:	460b      	mov	r3, r1
 80029f0:	b510      	push	{r4, lr}
 80029f2:	2100      	movs	r1, #0
 80029f4:	4604      	mov	r4, r0
 80029f6:	2258      	movs	r2, #88	; 0x58
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fb84 	bl	8003106 <memset>
 80029fe:	4601      	mov	r1, r0
 8002a00:	4620      	mov	r0, r4
 8002a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a06:	f7ff bfd1 	b.w	80029ac <_swistat>

08002a0a <_stat>:
 8002a0a:	b538      	push	{r3, r4, r5, lr}
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	4604      	mov	r4, r0
 8002a10:	2258      	movs	r2, #88	; 0x58
 8002a12:	2100      	movs	r1, #0
 8002a14:	4628      	mov	r0, r5
 8002a16:	f000 fb76 	bl	8003106 <memset>
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f000 f811 	bl	8002a44 <_swiopen>
 8002a22:	1c43      	adds	r3, r0, #1
 8002a24:	4604      	mov	r4, r0
 8002a26:	d00b      	beq.n	8002a40 <_stat+0x36>
 8002a28:	686b      	ldr	r3, [r5, #4]
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002a30:	606b      	str	r3, [r5, #4]
 8002a32:	f7ff ffbb 	bl	80029ac <_swistat>
 8002a36:	4605      	mov	r5, r0
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff ff91 	bl	8002960 <_close>
 8002a3e:	462c      	mov	r4, r5
 8002a40:	4620      	mov	r0, r4
 8002a42:	bd38      	pop	{r3, r4, r5, pc}

08002a44 <_swiopen>:
 8002a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a48:	4607      	mov	r7, r0
 8002a4a:	460e      	mov	r6, r1
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002af4 <_swiopen+0xb0>
 8002a52:	b097      	sub	sp, #92	; 0x5c
 8002a54:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002a58:	1c61      	adds	r1, r4, #1
 8002a5a:	d037      	beq.n	8002acc <_swiopen+0x88>
 8002a5c:	3501      	adds	r5, #1
 8002a5e:	2d14      	cmp	r5, #20
 8002a60:	d1f8      	bne.n	8002a54 <_swiopen+0x10>
 8002a62:	f000 fb9f 	bl	80031a4 <__errno>
 8002a66:	2318      	movs	r3, #24
 8002a68:	f04f 34ff 	mov.w	r4, #4294967295
 8002a6c:	6003      	str	r3, [r0, #0]
 8002a6e:	e03d      	b.n	8002aec <_swiopen+0xa8>
 8002a70:	f240 6301 	movw	r3, #1537	; 0x601
 8002a74:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002a78:	07b2      	lsls	r2, r6, #30
 8002a7a:	bf48      	it	mi
 8002a7c:	f044 0402 	orrmi.w	r4, r4, #2
 8002a80:	421e      	tst	r6, r3
 8002a82:	bf18      	it	ne
 8002a84:	f044 0404 	orrne.w	r4, r4, #4
 8002a88:	0733      	lsls	r3, r6, #28
 8002a8a:	bf48      	it	mi
 8002a8c:	f024 0404 	bicmi.w	r4, r4, #4
 8002a90:	4638      	mov	r0, r7
 8002a92:	bf48      	it	mi
 8002a94:	f044 0408 	orrmi.w	r4, r4, #8
 8002a98:	9700      	str	r7, [sp, #0]
 8002a9a:	f7fd fb57 	bl	800014c <strlen>
 8002a9e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002aa2:	2401      	movs	r4, #1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	beab      	bkpt	0x00ab
 8002aaa:	4604      	mov	r4, r0
 8002aac:	2c00      	cmp	r4, #0
 8002aae:	db08      	blt.n	8002ac2 <_swiopen+0x7e>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002ab6:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002aba:	462c      	mov	r4, r5
 8002abc:	f8c8 3004 	str.w	r3, [r8, #4]
 8002ac0:	e014      	b.n	8002aec <_swiopen+0xa8>
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7ff fe94 	bl	80027f0 <error>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	e00f      	b.n	8002aec <_swiopen+0xa8>
 8002acc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002ad0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ad4:	46e9      	mov	r9, sp
 8002ad6:	d1cb      	bne.n	8002a70 <_swiopen+0x2c>
 8002ad8:	4649      	mov	r1, r9
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7ff ff95 	bl	8002a0a <_stat>
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d0c5      	beq.n	8002a70 <_swiopen+0x2c>
 8002ae4:	f000 fb5e 	bl	80031a4 <__errno>
 8002ae8:	2311      	movs	r3, #17
 8002aea:	6003      	str	r3, [r0, #0]
 8002aec:	4620      	mov	r0, r4
 8002aee:	b017      	add	sp, #92	; 0x5c
 8002af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002af4:	20000180 	.word	0x20000180

08002af8 <_get_semihosting_exts>:
 8002af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002afc:	4606      	mov	r6, r0
 8002afe:	460f      	mov	r7, r1
 8002b00:	482a      	ldr	r0, [pc, #168]	; (8002bac <_get_semihosting_exts+0xb4>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	4615      	mov	r5, r2
 8002b06:	f7ff ff9d 	bl	8002a44 <_swiopen>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	462a      	mov	r2, r5
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4630      	mov	r0, r6
 8002b12:	f000 faf8 	bl	8003106 <memset>
 8002b16:	1c63      	adds	r3, r4, #1
 8002b18:	d016      	beq.n	8002b48 <_get_semihosting_exts+0x50>
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7ff fe4e 	bl	80027bc <findslot>
 8002b20:	f04f 080c 	mov.w	r8, #12
 8002b24:	4681      	mov	r9, r0
 8002b26:	4640      	mov	r0, r8
 8002b28:	4649      	mov	r1, r9
 8002b2a:	beab      	bkpt	0x00ab
 8002b2c:	4680      	mov	r8, r0
 8002b2e:	4640      	mov	r0, r8
 8002b30:	f7ff fe6c 	bl	800280c <checkerror>
 8002b34:	2803      	cmp	r0, #3
 8002b36:	dd02      	ble.n	8002b3e <_get_semihosting_exts+0x46>
 8002b38:	1ec3      	subs	r3, r0, #3
 8002b3a:	42ab      	cmp	r3, r5
 8002b3c:	dc08      	bgt.n	8002b50 <_get_semihosting_exts+0x58>
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff ff0e 	bl	8002960 <_close>
 8002b44:	f04f 34ff 	mov.w	r4, #4294967295
 8002b48:	4620      	mov	r0, r4
 8002b4a:	b003      	add	sp, #12
 8002b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b50:	2204      	movs	r2, #4
 8002b52:	4620      	mov	r0, r4
 8002b54:	eb0d 0102 	add.w	r1, sp, r2
 8002b58:	f7ff fe6d 	bl	8002836 <_read>
 8002b5c:	2803      	cmp	r0, #3
 8002b5e:	ddee      	ble.n	8002b3e <_get_semihosting_exts+0x46>
 8002b60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b64:	2b53      	cmp	r3, #83	; 0x53
 8002b66:	d1ea      	bne.n	8002b3e <_get_semihosting_exts+0x46>
 8002b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002b6c:	2b48      	cmp	r3, #72	; 0x48
 8002b6e:	d1e6      	bne.n	8002b3e <_get_semihosting_exts+0x46>
 8002b70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b74:	2b46      	cmp	r3, #70	; 0x46
 8002b76:	d1e2      	bne.n	8002b3e <_get_semihosting_exts+0x46>
 8002b78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b7c:	2b42      	cmp	r3, #66	; 0x42
 8002b7e:	d1de      	bne.n	8002b3e <_get_semihosting_exts+0x46>
 8002b80:	2201      	movs	r2, #1
 8002b82:	4639      	mov	r1, r7
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff fe70 	bl	800286a <_swilseek>
 8002b8a:	2800      	cmp	r0, #0
 8002b8c:	dbd7      	blt.n	8002b3e <_get_semihosting_exts+0x46>
 8002b8e:	462a      	mov	r2, r5
 8002b90:	4631      	mov	r1, r6
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff fe4f 	bl	8002836 <_read>
 8002b98:	4605      	mov	r5, r0
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fee0 	bl	8002960 <_close>
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f7ff fe33 	bl	800280c <checkerror>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	e7ce      	b.n	8002b48 <_get_semihosting_exts+0x50>
 8002baa:	bf00      	nop
 8002bac:	08004050 	.word	0x08004050

08002bb0 <initialise_semihosting_exts>:
 8002bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4d09      	ldr	r5, [pc, #36]	; (8002bdc <initialise_semihosting_exts+0x2c>)
 8002bb8:	4c09      	ldr	r4, [pc, #36]	; (8002be0 <initialise_semihosting_exts+0x30>)
 8002bba:	a801      	add	r0, sp, #4
 8002bbc:	6029      	str	r1, [r5, #0]
 8002bbe:	6022      	str	r2, [r4, #0]
 8002bc0:	f7ff ff9a 	bl	8002af8 <_get_semihosting_exts>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	dd07      	ble.n	8002bd8 <initialise_semihosting_exts+0x28>
 8002bc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002bcc:	f003 0201 	and.w	r2, r3, #1
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	602a      	str	r2, [r5, #0]
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	b003      	add	sp, #12
 8002bda:	bd30      	pop	{r4, r5, pc}
 8002bdc:	20000014 	.word	0x20000014
 8002be0:	20000018 	.word	0x20000018

08002be4 <_has_ext_stdout_stderr>:
 8002be4:	b510      	push	{r4, lr}
 8002be6:	4c04      	ldr	r4, [pc, #16]	; (8002bf8 <_has_ext_stdout_stderr+0x14>)
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da01      	bge.n	8002bf2 <_has_ext_stdout_stderr+0xe>
 8002bee:	f7ff ffdf 	bl	8002bb0 <initialise_semihosting_exts>
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	bd10      	pop	{r4, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000018 	.word	0x20000018

08002bfc <initialise_monitor_handles>:
 8002bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c00:	2303      	movs	r3, #3
 8002c02:	2400      	movs	r4, #0
 8002c04:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002ca8 <initialise_monitor_handles+0xac>
 8002c08:	b085      	sub	sp, #20
 8002c0a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c0e:	af01      	add	r7, sp, #4
 8002c10:	9303      	str	r3, [sp, #12]
 8002c12:	2501      	movs	r5, #1
 8002c14:	9402      	str	r4, [sp, #8]
 8002c16:	4628      	mov	r0, r5
 8002c18:	4639      	mov	r1, r7
 8002c1a:	beab      	bkpt	0x00ab
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8002cac <initialise_monitor_handles+0xb0>
 8002c26:	4623      	mov	r3, r4
 8002c28:	4c21      	ldr	r4, [pc, #132]	; (8002cb0 <initialise_monitor_handles+0xb4>)
 8002c2a:	f8c8 5000 	str.w	r5, [r8]
 8002c2e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002c32:	3301      	adds	r3, #1
 8002c34:	2b14      	cmp	r3, #20
 8002c36:	d1fa      	bne.n	8002c2e <initialise_monitor_handles+0x32>
 8002c38:	f7ff ffd4 	bl	8002be4 <_has_ext_stdout_stderr>
 8002c3c:	4d1d      	ldr	r5, [pc, #116]	; (8002cb4 <initialise_monitor_handles+0xb8>)
 8002c3e:	b1d0      	cbz	r0, 8002c76 <initialise_monitor_handles+0x7a>
 8002c40:	f04f 0a03 	mov.w	sl, #3
 8002c44:	2304      	movs	r3, #4
 8002c46:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c4a:	2601      	movs	r6, #1
 8002c4c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	4630      	mov	r0, r6
 8002c54:	4639      	mov	r1, r7
 8002c56:	beab      	bkpt	0x00ab
 8002c58:	4683      	mov	fp, r0
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <initialise_monitor_handles+0xbc>)
 8002c5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c60:	f8c3 b000 	str.w	fp, [r3]
 8002c64:	2308      	movs	r3, #8
 8002c66:	f8cd a00c 	str.w	sl, [sp, #12]
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	4639      	mov	r1, r7
 8002c70:	beab      	bkpt	0x00ab
 8002c72:	4606      	mov	r6, r0
 8002c74:	602e      	str	r6, [r5, #0]
 8002c76:	2600      	movs	r6, #0
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	6066      	str	r6, [r4, #4]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	bf02      	ittt	eq
 8002c80:	4b0d      	ldreq	r3, [pc, #52]	; (8002cb8 <initialise_monitor_handles+0xbc>)
 8002c82:	681b      	ldreq	r3, [r3, #0]
 8002c84:	602b      	streq	r3, [r5, #0]
 8002c86:	f8d8 3000 	ldr.w	r3, [r8]
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	f7ff ffaa 	bl	8002be4 <_has_ext_stdout_stderr>
 8002c90:	b130      	cbz	r0, 8002ca0 <initialise_monitor_handles+0xa4>
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <initialise_monitor_handles+0xbc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002ca0:	b005      	add	sp, #20
 8002ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	08004066 	.word	0x08004066
 8002cac:	20000178 	.word	0x20000178
 8002cb0:	20000180 	.word	0x20000180
 8002cb4:	20000174 	.word	0x20000174
 8002cb8:	2000017c 	.word	0x2000017c

08002cbc <_isatty>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	f7ff fd7d 	bl	80027bc <findslot>
 8002cc2:	2509      	movs	r5, #9
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	b920      	cbnz	r0, 8002cd2 <_isatty+0x16>
 8002cc8:	f000 fa6c 	bl	80031a4 <__errno>
 8002ccc:	6005      	str	r5, [r0, #0]
 8002cce:	4620      	mov	r0, r4
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	beab      	bkpt	0x00ab
 8002cd8:	4604      	mov	r4, r0
 8002cda:	2c01      	cmp	r4, #1
 8002cdc:	d0f7      	beq.n	8002cce <_isatty+0x12>
 8002cde:	f000 fa61 	bl	80031a4 <__errno>
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	2613      	movs	r6, #19
 8002ce8:	4630      	mov	r0, r6
 8002cea:	4621      	mov	r1, r4
 8002cec:	beab      	bkpt	0x00ab
 8002cee:	4606      	mov	r6, r0
 8002cf0:	602e      	str	r6, [r5, #0]
 8002cf2:	e7ec      	b.n	8002cce <_isatty+0x12>

08002cf4 <__sflush_r>:
 8002cf4:	898a      	ldrh	r2, [r1, #12]
 8002cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf8:	4605      	mov	r5, r0
 8002cfa:	0710      	lsls	r0, r2, #28
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	d457      	bmi.n	8002db0 <__sflush_r+0xbc>
 8002d00:	684b      	ldr	r3, [r1, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	dc04      	bgt.n	8002d10 <__sflush_r+0x1c>
 8002d06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	dc01      	bgt.n	8002d10 <__sflush_r+0x1c>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	d0fa      	beq.n	8002d0c <__sflush_r+0x18>
 8002d16:	2300      	movs	r3, #0
 8002d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d1c:	682f      	ldr	r7, [r5, #0]
 8002d1e:	6a21      	ldr	r1, [r4, #32]
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	d032      	beq.n	8002d8a <__sflush_r+0x96>
 8002d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	075a      	lsls	r2, r3, #29
 8002d2a:	d505      	bpl.n	8002d38 <__sflush_r+0x44>
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	1ac0      	subs	r0, r0, r3
 8002d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d32:	b10b      	cbz	r3, 8002d38 <__sflush_r+0x44>
 8002d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d36:	1ac0      	subs	r0, r0, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d3e:	4628      	mov	r0, r5
 8002d40:	6a21      	ldr	r1, [r4, #32]
 8002d42:	47b0      	blx	r6
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	89a3      	ldrh	r3, [r4, #12]
 8002d48:	d106      	bne.n	8002d58 <__sflush_r+0x64>
 8002d4a:	6829      	ldr	r1, [r5, #0]
 8002d4c:	291d      	cmp	r1, #29
 8002d4e:	d82b      	bhi.n	8002da8 <__sflush_r+0xb4>
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <__sflush_r+0x100>)
 8002d52:	410a      	asrs	r2, r1
 8002d54:	07d6      	lsls	r6, r2, #31
 8002d56:	d427      	bmi.n	8002da8 <__sflush_r+0xb4>
 8002d58:	2200      	movs	r2, #0
 8002d5a:	6062      	str	r2, [r4, #4]
 8002d5c:	6922      	ldr	r2, [r4, #16]
 8002d5e:	04d9      	lsls	r1, r3, #19
 8002d60:	6022      	str	r2, [r4, #0]
 8002d62:	d504      	bpl.n	8002d6e <__sflush_r+0x7a>
 8002d64:	1c42      	adds	r2, r0, #1
 8002d66:	d101      	bne.n	8002d6c <__sflush_r+0x78>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b903      	cbnz	r3, 8002d6e <__sflush_r+0x7a>
 8002d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8002d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d70:	602f      	str	r7, [r5, #0]
 8002d72:	2900      	cmp	r1, #0
 8002d74:	d0ca      	beq.n	8002d0c <__sflush_r+0x18>
 8002d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d7a:	4299      	cmp	r1, r3
 8002d7c:	d002      	beq.n	8002d84 <__sflush_r+0x90>
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f000 fa3e 	bl	8003200 <_free_r>
 8002d84:	2000      	movs	r0, #0
 8002d86:	6360      	str	r0, [r4, #52]	; 0x34
 8002d88:	e7c1      	b.n	8002d0e <__sflush_r+0x1a>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	47b0      	blx	r6
 8002d90:	1c41      	adds	r1, r0, #1
 8002d92:	d1c8      	bne.n	8002d26 <__sflush_r+0x32>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0c5      	beq.n	8002d26 <__sflush_r+0x32>
 8002d9a:	2b1d      	cmp	r3, #29
 8002d9c:	d001      	beq.n	8002da2 <__sflush_r+0xae>
 8002d9e:	2b16      	cmp	r3, #22
 8002da0:	d101      	bne.n	8002da6 <__sflush_r+0xb2>
 8002da2:	602f      	str	r7, [r5, #0]
 8002da4:	e7b2      	b.n	8002d0c <__sflush_r+0x18>
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	e7ae      	b.n	8002d0e <__sflush_r+0x1a>
 8002db0:	690f      	ldr	r7, [r1, #16]
 8002db2:	2f00      	cmp	r7, #0
 8002db4:	d0aa      	beq.n	8002d0c <__sflush_r+0x18>
 8002db6:	0793      	lsls	r3, r2, #30
 8002db8:	bf18      	it	ne
 8002dba:	2300      	movne	r3, #0
 8002dbc:	680e      	ldr	r6, [r1, #0]
 8002dbe:	bf08      	it	eq
 8002dc0:	694b      	ldreq	r3, [r1, #20]
 8002dc2:	1bf6      	subs	r6, r6, r7
 8002dc4:	600f      	str	r7, [r1, #0]
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	2e00      	cmp	r6, #0
 8002dca:	dd9f      	ble.n	8002d0c <__sflush_r+0x18>
 8002dcc:	4633      	mov	r3, r6
 8002dce:	463a      	mov	r2, r7
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	6a21      	ldr	r1, [r4, #32]
 8002dd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002dd8:	47e0      	blx	ip
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	dc06      	bgt.n	8002dec <__sflush_r+0xf8>
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de8:	81a3      	strh	r3, [r4, #12]
 8002dea:	e790      	b.n	8002d0e <__sflush_r+0x1a>
 8002dec:	4407      	add	r7, r0
 8002dee:	1a36      	subs	r6, r6, r0
 8002df0:	e7ea      	b.n	8002dc8 <__sflush_r+0xd4>
 8002df2:	bf00      	nop
 8002df4:	dfbffffe 	.word	0xdfbffffe

08002df8 <_fflush_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	690b      	ldr	r3, [r1, #16]
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	b913      	cbnz	r3, 8002e08 <_fflush_r+0x10>
 8002e02:	2500      	movs	r5, #0
 8002e04:	4628      	mov	r0, r5
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	b118      	cbz	r0, 8002e12 <_fflush_r+0x1a>
 8002e0a:	6a03      	ldr	r3, [r0, #32]
 8002e0c:	b90b      	cbnz	r3, 8002e12 <_fflush_r+0x1a>
 8002e0e:	f000 f8bb 	bl	8002f88 <__sinit>
 8002e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f3      	beq.n	8002e02 <_fflush_r+0xa>
 8002e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e1c:	07d0      	lsls	r0, r2, #31
 8002e1e:	d404      	bmi.n	8002e2a <_fflush_r+0x32>
 8002e20:	0599      	lsls	r1, r3, #22
 8002e22:	d402      	bmi.n	8002e2a <_fflush_r+0x32>
 8002e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e26:	f000 f9e8 	bl	80031fa <__retarget_lock_acquire_recursive>
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	f7ff ff61 	bl	8002cf4 <__sflush_r>
 8002e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e34:	4605      	mov	r5, r0
 8002e36:	07da      	lsls	r2, r3, #31
 8002e38:	d4e4      	bmi.n	8002e04 <_fflush_r+0xc>
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	059b      	lsls	r3, r3, #22
 8002e3e:	d4e1      	bmi.n	8002e04 <_fflush_r+0xc>
 8002e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e42:	f000 f9db 	bl	80031fc <__retarget_lock_release_recursive>
 8002e46:	e7dd      	b.n	8002e04 <_fflush_r+0xc>

08002e48 <fflush>:
 8002e48:	4601      	mov	r1, r0
 8002e4a:	b920      	cbnz	r0, 8002e56 <fflush+0xe>
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <fflush+0x18>)
 8002e4e:	4905      	ldr	r1, [pc, #20]	; (8002e64 <fflush+0x1c>)
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <fflush+0x20>)
 8002e52:	f000 b8b1 	b.w	8002fb8 <_fwalk_sglue>
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <fflush+0x24>)
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	f7ff bfcd 	b.w	8002df8 <_fflush_r>
 8002e5e:	bf00      	nop
 8002e60:	2000001c 	.word	0x2000001c
 8002e64:	08002df9 	.word	0x08002df9
 8002e68:	20000028 	.word	0x20000028
 8002e6c:	20000074 	.word	0x20000074

08002e70 <std>:
 8002e70:	2300      	movs	r3, #0
 8002e72:	b510      	push	{r4, lr}
 8002e74:	4604      	mov	r4, r0
 8002e76:	e9c0 3300 	strd	r3, r3, [r0]
 8002e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e7e:	6083      	str	r3, [r0, #8]
 8002e80:	8181      	strh	r1, [r0, #12]
 8002e82:	6643      	str	r3, [r0, #100]	; 0x64
 8002e84:	81c2      	strh	r2, [r0, #14]
 8002e86:	6183      	str	r3, [r0, #24]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	305c      	adds	r0, #92	; 0x5c
 8002e8e:	f000 f93a 	bl	8003106 <memset>
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <std+0x58>)
 8002e94:	6224      	str	r4, [r4, #32]
 8002e96:	6263      	str	r3, [r4, #36]	; 0x24
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <std+0x5c>)
 8002e9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <std+0x60>)
 8002e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <std+0x64>)
 8002ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <std+0x68>)
 8002ea6:	429c      	cmp	r4, r3
 8002ea8:	d006      	beq.n	8002eb8 <std+0x48>
 8002eaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002eae:	4294      	cmp	r4, r2
 8002eb0:	d002      	beq.n	8002eb8 <std+0x48>
 8002eb2:	33d0      	adds	r3, #208	; 0xd0
 8002eb4:	429c      	cmp	r4, r3
 8002eb6:	d105      	bne.n	8002ec4 <std+0x54>
 8002eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec0:	f000 b99a 	b.w	80031f8 <__retarget_lock_init_recursive>
 8002ec4:	bd10      	pop	{r4, pc}
 8002ec6:	bf00      	nop
 8002ec8:	08003081 	.word	0x08003081
 8002ecc:	080030a3 	.word	0x080030a3
 8002ed0:	080030db 	.word	0x080030db
 8002ed4:	080030ff 	.word	0x080030ff
 8002ed8:	20000220 	.word	0x20000220

08002edc <stdio_exit_handler>:
 8002edc:	4a02      	ldr	r2, [pc, #8]	; (8002ee8 <stdio_exit_handler+0xc>)
 8002ede:	4903      	ldr	r1, [pc, #12]	; (8002eec <stdio_exit_handler+0x10>)
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <stdio_exit_handler+0x14>)
 8002ee2:	f000 b869 	b.w	8002fb8 <_fwalk_sglue>
 8002ee6:	bf00      	nop
 8002ee8:	2000001c 	.word	0x2000001c
 8002eec:	08002df9 	.word	0x08002df9
 8002ef0:	20000028 	.word	0x20000028

08002ef4 <cleanup_stdio>:
 8002ef4:	6841      	ldr	r1, [r0, #4]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <cleanup_stdio+0x34>)
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	4299      	cmp	r1, r3
 8002efc:	4604      	mov	r4, r0
 8002efe:	d001      	beq.n	8002f04 <cleanup_stdio+0x10>
 8002f00:	f7ff ff7a 	bl	8002df8 <_fflush_r>
 8002f04:	68a1      	ldr	r1, [r4, #8]
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <cleanup_stdio+0x38>)
 8002f08:	4299      	cmp	r1, r3
 8002f0a:	d002      	beq.n	8002f12 <cleanup_stdio+0x1e>
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff ff73 	bl	8002df8 <_fflush_r>
 8002f12:	68e1      	ldr	r1, [r4, #12]
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <cleanup_stdio+0x3c>)
 8002f16:	4299      	cmp	r1, r3
 8002f18:	d004      	beq.n	8002f24 <cleanup_stdio+0x30>
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f20:	f7ff bf6a 	b.w	8002df8 <_fflush_r>
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	20000220 	.word	0x20000220
 8002f2c:	20000288 	.word	0x20000288
 8002f30:	200002f0 	.word	0x200002f0

08002f34 <global_stdio_init.part.0>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <global_stdio_init.part.0+0x30>)
 8002f38:	4c0b      	ldr	r4, [pc, #44]	; (8002f68 <global_stdio_init.part.0+0x34>)
 8002f3a:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <global_stdio_init.part.0+0x38>)
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	2104      	movs	r1, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	f7ff ff94 	bl	8002e70 <std>
 8002f48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2109      	movs	r1, #9
 8002f50:	f7ff ff8e 	bl	8002e70 <std>
 8002f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f58:	2202      	movs	r2, #2
 8002f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f5e:	2112      	movs	r1, #18
 8002f60:	f7ff bf86 	b.w	8002e70 <std>
 8002f64:	20000358 	.word	0x20000358
 8002f68:	20000220 	.word	0x20000220
 8002f6c:	08002edd 	.word	0x08002edd

08002f70 <__sfp_lock_acquire>:
 8002f70:	4801      	ldr	r0, [pc, #4]	; (8002f78 <__sfp_lock_acquire+0x8>)
 8002f72:	f000 b942 	b.w	80031fa <__retarget_lock_acquire_recursive>
 8002f76:	bf00      	nop
 8002f78:	20000361 	.word	0x20000361

08002f7c <__sfp_lock_release>:
 8002f7c:	4801      	ldr	r0, [pc, #4]	; (8002f84 <__sfp_lock_release+0x8>)
 8002f7e:	f000 b93d 	b.w	80031fc <__retarget_lock_release_recursive>
 8002f82:	bf00      	nop
 8002f84:	20000361 	.word	0x20000361

08002f88 <__sinit>:
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	f7ff fff0 	bl	8002f70 <__sfp_lock_acquire>
 8002f90:	6a23      	ldr	r3, [r4, #32]
 8002f92:	b11b      	cbz	r3, 8002f9c <__sinit+0x14>
 8002f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f98:	f7ff bff0 	b.w	8002f7c <__sfp_lock_release>
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__sinit+0x28>)
 8002f9e:	6223      	str	r3, [r4, #32]
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__sinit+0x2c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f5      	bne.n	8002f94 <__sinit+0xc>
 8002fa8:	f7ff ffc4 	bl	8002f34 <global_stdio_init.part.0>
 8002fac:	e7f2      	b.n	8002f94 <__sinit+0xc>
 8002fae:	bf00      	nop
 8002fb0:	08002ef5 	.word	0x08002ef5
 8002fb4:	20000358 	.word	0x20000358

08002fb8 <_fwalk_sglue>:
 8002fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	4688      	mov	r8, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8002fcc:	d505      	bpl.n	8002fda <_fwalk_sglue+0x22>
 8002fce:	6824      	ldr	r4, [r4, #0]
 8002fd0:	2c00      	cmp	r4, #0
 8002fd2:	d1f7      	bne.n	8002fc4 <_fwalk_sglue+0xc>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fda:	89ab      	ldrh	r3, [r5, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d907      	bls.n	8002ff0 <_fwalk_sglue+0x38>
 8002fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	d003      	beq.n	8002ff0 <_fwalk_sglue+0x38>
 8002fe8:	4629      	mov	r1, r5
 8002fea:	4638      	mov	r0, r7
 8002fec:	47c0      	blx	r8
 8002fee:	4306      	orrs	r6, r0
 8002ff0:	3568      	adds	r5, #104	; 0x68
 8002ff2:	e7e9      	b.n	8002fc8 <_fwalk_sglue+0x10>

08002ff4 <iprintf>:
 8002ff4:	b40f      	push	{r0, r1, r2, r3}
 8002ff6:	b507      	push	{r0, r1, r2, lr}
 8002ff8:	4906      	ldr	r1, [pc, #24]	; (8003014 <iprintf+0x20>)
 8002ffa:	ab04      	add	r3, sp, #16
 8002ffc:	6808      	ldr	r0, [r1, #0]
 8002ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003002:	6881      	ldr	r1, [r0, #8]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	f000 fb6f 	bl	80036e8 <_vfiprintf_r>
 800300a:	b003      	add	sp, #12
 800300c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003010:	b004      	add	sp, #16
 8003012:	4770      	bx	lr
 8003014:	20000074 	.word	0x20000074

08003018 <sniprintf>:
 8003018:	b40c      	push	{r2, r3}
 800301a:	b530      	push	{r4, r5, lr}
 800301c:	4b17      	ldr	r3, [pc, #92]	; (800307c <sniprintf+0x64>)
 800301e:	1e0c      	subs	r4, r1, #0
 8003020:	681d      	ldr	r5, [r3, #0]
 8003022:	b09d      	sub	sp, #116	; 0x74
 8003024:	da08      	bge.n	8003038 <sniprintf+0x20>
 8003026:	238b      	movs	r3, #139	; 0x8b
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	b01d      	add	sp, #116	; 0x74
 8003030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003034:	b002      	add	sp, #8
 8003036:	4770      	bx	lr
 8003038:	f44f 7302 	mov.w	r3, #520	; 0x208
 800303c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003040:	bf0c      	ite	eq
 8003042:	4623      	moveq	r3, r4
 8003044:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003048:	9304      	str	r3, [sp, #16]
 800304a:	9307      	str	r3, [sp, #28]
 800304c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003050:	9002      	str	r0, [sp, #8]
 8003052:	9006      	str	r0, [sp, #24]
 8003054:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003058:	4628      	mov	r0, r5
 800305a:	ab21      	add	r3, sp, #132	; 0x84
 800305c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800305e:	a902      	add	r1, sp, #8
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	f000 fa1b 	bl	800349c <_svfiprintf_r>
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	bfbc      	itt	lt
 800306a:	238b      	movlt	r3, #139	; 0x8b
 800306c:	602b      	strlt	r3, [r5, #0]
 800306e:	2c00      	cmp	r4, #0
 8003070:	d0dd      	beq.n	800302e <sniprintf+0x16>
 8003072:	2200      	movs	r2, #0
 8003074:	9b02      	ldr	r3, [sp, #8]
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e7d9      	b.n	800302e <sniprintf+0x16>
 800307a:	bf00      	nop
 800307c:	20000074 	.word	0x20000074

08003080 <__sread>:
 8003080:	b510      	push	{r4, lr}
 8003082:	460c      	mov	r4, r1
 8003084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003088:	f000 f868 	bl	800315c <_read_r>
 800308c:	2800      	cmp	r0, #0
 800308e:	bfab      	itete	ge
 8003090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003092:	89a3      	ldrhlt	r3, [r4, #12]
 8003094:	181b      	addge	r3, r3, r0
 8003096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800309a:	bfac      	ite	ge
 800309c:	6563      	strge	r3, [r4, #84]	; 0x54
 800309e:	81a3      	strhlt	r3, [r4, #12]
 80030a0:	bd10      	pop	{r4, pc}

080030a2 <__swrite>:
 80030a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a6:	461f      	mov	r7, r3
 80030a8:	898b      	ldrh	r3, [r1, #12]
 80030aa:	4605      	mov	r5, r0
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	460c      	mov	r4, r1
 80030b0:	4616      	mov	r6, r2
 80030b2:	d505      	bpl.n	80030c0 <__swrite+0x1e>
 80030b4:	2302      	movs	r3, #2
 80030b6:	2200      	movs	r2, #0
 80030b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030bc:	f000 f83c 	bl	8003138 <_lseek_r>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	4632      	mov	r2, r6
 80030c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030c8:	81a3      	strh	r3, [r4, #12]
 80030ca:	4628      	mov	r0, r5
 80030cc:	463b      	mov	r3, r7
 80030ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030d6:	f000 b853 	b.w	8003180 <_write_r>

080030da <__sseek>:
 80030da:	b510      	push	{r4, lr}
 80030dc:	460c      	mov	r4, r1
 80030de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e2:	f000 f829 	bl	8003138 <_lseek_r>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	bf15      	itete	ne
 80030ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80030ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030f6:	81a3      	strheq	r3, [r4, #12]
 80030f8:	bf18      	it	ne
 80030fa:	81a3      	strhne	r3, [r4, #12]
 80030fc:	bd10      	pop	{r4, pc}

080030fe <__sclose>:
 80030fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003102:	f000 b809 	b.w	8003118 <_close_r>

08003106 <memset>:
 8003106:	4603      	mov	r3, r0
 8003108:	4402      	add	r2, r0
 800310a:	4293      	cmp	r3, r2
 800310c:	d100      	bne.n	8003110 <memset+0xa>
 800310e:	4770      	bx	lr
 8003110:	f803 1b01 	strb.w	r1, [r3], #1
 8003114:	e7f9      	b.n	800310a <memset+0x4>
	...

08003118 <_close_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	2300      	movs	r3, #0
 800311c:	4d05      	ldr	r5, [pc, #20]	; (8003134 <_close_r+0x1c>)
 800311e:	4604      	mov	r4, r0
 8003120:	4608      	mov	r0, r1
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	f7ff fc1c 	bl	8002960 <_close>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_close_r+0x1a>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	b103      	cbz	r3, 8003132 <_close_r+0x1a>
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	2000035c 	.word	0x2000035c

08003138 <_lseek_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	4604      	mov	r4, r0
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	2200      	movs	r2, #0
 8003142:	4d05      	ldr	r5, [pc, #20]	; (8003158 <_lseek_r+0x20>)
 8003144:	602a      	str	r2, [r5, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	f7ff fbcb 	bl	80028e2 <_lseek>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d102      	bne.n	8003156 <_lseek_r+0x1e>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	b103      	cbz	r3, 8003156 <_lseek_r+0x1e>
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	bd38      	pop	{r3, r4, r5, pc}
 8003158:	2000035c 	.word	0x2000035c

0800315c <_read_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	2200      	movs	r2, #0
 8003166:	4d05      	ldr	r5, [pc, #20]	; (800317c <_read_r+0x20>)
 8003168:	602a      	str	r2, [r5, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f7ff fb63 	bl	8002836 <_read>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_read_r+0x1e>
 8003174:	682b      	ldr	r3, [r5, #0]
 8003176:	b103      	cbz	r3, 800317a <_read_r+0x1e>
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	2000035c 	.word	0x2000035c

08003180 <_write_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	2200      	movs	r2, #0
 800318a:	4d05      	ldr	r5, [pc, #20]	; (80031a0 <_write_r+0x20>)
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	f7ff fbb9 	bl	8002906 <_write>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_write_r+0x1e>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_write_r+0x1e>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	2000035c 	.word	0x2000035c

080031a4 <__errno>:
 80031a4:	4b01      	ldr	r3, [pc, #4]	; (80031ac <__errno+0x8>)
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000074 	.word	0x20000074

080031b0 <__libc_init_array>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	2600      	movs	r6, #0
 80031b4:	4d0c      	ldr	r5, [pc, #48]	; (80031e8 <__libc_init_array+0x38>)
 80031b6:	4c0d      	ldr	r4, [pc, #52]	; (80031ec <__libc_init_array+0x3c>)
 80031b8:	1b64      	subs	r4, r4, r5
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	42a6      	cmp	r6, r4
 80031be:	d109      	bne.n	80031d4 <__libc_init_array+0x24>
 80031c0:	f000 fed6 	bl	8003f70 <_init>
 80031c4:	2600      	movs	r6, #0
 80031c6:	4d0a      	ldr	r5, [pc, #40]	; (80031f0 <__libc_init_array+0x40>)
 80031c8:	4c0a      	ldr	r4, [pc, #40]	; (80031f4 <__libc_init_array+0x44>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d105      	bne.n	80031de <__libc_init_array+0x2e>
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d8:	4798      	blx	r3
 80031da:	3601      	adds	r6, #1
 80031dc:	e7ee      	b.n	80031bc <__libc_init_array+0xc>
 80031de:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e2:	4798      	blx	r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	e7f2      	b.n	80031ce <__libc_init_array+0x1e>
 80031e8:	080040a0 	.word	0x080040a0
 80031ec:	080040a0 	.word	0x080040a0
 80031f0:	080040a0 	.word	0x080040a0
 80031f4:	080040a4 	.word	0x080040a4

080031f8 <__retarget_lock_init_recursive>:
 80031f8:	4770      	bx	lr

080031fa <__retarget_lock_acquire_recursive>:
 80031fa:	4770      	bx	lr

080031fc <__retarget_lock_release_recursive>:
 80031fc:	4770      	bx	lr
	...

08003200 <_free_r>:
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	2900      	cmp	r1, #0
 8003206:	d040      	beq.n	800328a <_free_r+0x8a>
 8003208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800320c:	1f0c      	subs	r4, r1, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	bfb8      	it	lt
 8003212:	18e4      	addlt	r4, r4, r3
 8003214:	f000 f8dc 	bl	80033d0 <__malloc_lock>
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <_free_r+0x8c>)
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	b933      	cbnz	r3, 800322c <_free_r+0x2c>
 800321e:	6063      	str	r3, [r4, #4]
 8003220:	6014      	str	r4, [r2, #0]
 8003222:	4628      	mov	r0, r5
 8003224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003228:	f000 b8d8 	b.w	80033dc <__malloc_unlock>
 800322c:	42a3      	cmp	r3, r4
 800322e:	d908      	bls.n	8003242 <_free_r+0x42>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	1821      	adds	r1, r4, r0
 8003234:	428b      	cmp	r3, r1
 8003236:	bf01      	itttt	eq
 8003238:	6819      	ldreq	r1, [r3, #0]
 800323a:	685b      	ldreq	r3, [r3, #4]
 800323c:	1809      	addeq	r1, r1, r0
 800323e:	6021      	streq	r1, [r4, #0]
 8003240:	e7ed      	b.n	800321e <_free_r+0x1e>
 8003242:	461a      	mov	r2, r3
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b10b      	cbz	r3, 800324c <_free_r+0x4c>
 8003248:	42a3      	cmp	r3, r4
 800324a:	d9fa      	bls.n	8003242 <_free_r+0x42>
 800324c:	6811      	ldr	r1, [r2, #0]
 800324e:	1850      	adds	r0, r2, r1
 8003250:	42a0      	cmp	r0, r4
 8003252:	d10b      	bne.n	800326c <_free_r+0x6c>
 8003254:	6820      	ldr	r0, [r4, #0]
 8003256:	4401      	add	r1, r0
 8003258:	1850      	adds	r0, r2, r1
 800325a:	4283      	cmp	r3, r0
 800325c:	6011      	str	r1, [r2, #0]
 800325e:	d1e0      	bne.n	8003222 <_free_r+0x22>
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4408      	add	r0, r1
 8003266:	6010      	str	r0, [r2, #0]
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	e7da      	b.n	8003222 <_free_r+0x22>
 800326c:	d902      	bls.n	8003274 <_free_r+0x74>
 800326e:	230c      	movs	r3, #12
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	e7d6      	b.n	8003222 <_free_r+0x22>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	1821      	adds	r1, r4, r0
 8003278:	428b      	cmp	r3, r1
 800327a:	bf01      	itttt	eq
 800327c:	6819      	ldreq	r1, [r3, #0]
 800327e:	685b      	ldreq	r3, [r3, #4]
 8003280:	1809      	addeq	r1, r1, r0
 8003282:	6021      	streq	r1, [r4, #0]
 8003284:	6063      	str	r3, [r4, #4]
 8003286:	6054      	str	r4, [r2, #4]
 8003288:	e7cb      	b.n	8003222 <_free_r+0x22>
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	20000364 	.word	0x20000364

08003290 <sbrk_aligned>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4e0e      	ldr	r6, [pc, #56]	; (80032cc <sbrk_aligned+0x3c>)
 8003294:	460c      	mov	r4, r1
 8003296:	6831      	ldr	r1, [r6, #0]
 8003298:	4605      	mov	r5, r0
 800329a:	b911      	cbnz	r1, 80032a2 <sbrk_aligned+0x12>
 800329c:	f000 fd82 	bl	8003da4 <_sbrk_r>
 80032a0:	6030      	str	r0, [r6, #0]
 80032a2:	4621      	mov	r1, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 fd7d 	bl	8003da4 <_sbrk_r>
 80032aa:	1c43      	adds	r3, r0, #1
 80032ac:	d00a      	beq.n	80032c4 <sbrk_aligned+0x34>
 80032ae:	1cc4      	adds	r4, r0, #3
 80032b0:	f024 0403 	bic.w	r4, r4, #3
 80032b4:	42a0      	cmp	r0, r4
 80032b6:	d007      	beq.n	80032c8 <sbrk_aligned+0x38>
 80032b8:	1a21      	subs	r1, r4, r0
 80032ba:	4628      	mov	r0, r5
 80032bc:	f000 fd72 	bl	8003da4 <_sbrk_r>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d101      	bne.n	80032c8 <sbrk_aligned+0x38>
 80032c4:	f04f 34ff 	mov.w	r4, #4294967295
 80032c8:	4620      	mov	r0, r4
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	20000368 	.word	0x20000368

080032d0 <_malloc_r>:
 80032d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d4:	1ccd      	adds	r5, r1, #3
 80032d6:	f025 0503 	bic.w	r5, r5, #3
 80032da:	3508      	adds	r5, #8
 80032dc:	2d0c      	cmp	r5, #12
 80032de:	bf38      	it	cc
 80032e0:	250c      	movcc	r5, #12
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	4607      	mov	r7, r0
 80032e6:	db01      	blt.n	80032ec <_malloc_r+0x1c>
 80032e8:	42a9      	cmp	r1, r5
 80032ea:	d905      	bls.n	80032f8 <_malloc_r+0x28>
 80032ec:	230c      	movs	r3, #12
 80032ee:	2600      	movs	r6, #0
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4630      	mov	r0, r6
 80032f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033cc <_malloc_r+0xfc>
 80032fc:	f000 f868 	bl	80033d0 <__malloc_lock>
 8003300:	f8d8 3000 	ldr.w	r3, [r8]
 8003304:	461c      	mov	r4, r3
 8003306:	bb5c      	cbnz	r4, 8003360 <_malloc_r+0x90>
 8003308:	4629      	mov	r1, r5
 800330a:	4638      	mov	r0, r7
 800330c:	f7ff ffc0 	bl	8003290 <sbrk_aligned>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	4604      	mov	r4, r0
 8003314:	d155      	bne.n	80033c2 <_malloc_r+0xf2>
 8003316:	f8d8 4000 	ldr.w	r4, [r8]
 800331a:	4626      	mov	r6, r4
 800331c:	2e00      	cmp	r6, #0
 800331e:	d145      	bne.n	80033ac <_malloc_r+0xdc>
 8003320:	2c00      	cmp	r4, #0
 8003322:	d048      	beq.n	80033b6 <_malloc_r+0xe6>
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	4631      	mov	r1, r6
 8003328:	4638      	mov	r0, r7
 800332a:	eb04 0903 	add.w	r9, r4, r3
 800332e:	f000 fd39 	bl	8003da4 <_sbrk_r>
 8003332:	4581      	cmp	r9, r0
 8003334:	d13f      	bne.n	80033b6 <_malloc_r+0xe6>
 8003336:	6821      	ldr	r1, [r4, #0]
 8003338:	4638      	mov	r0, r7
 800333a:	1a6d      	subs	r5, r5, r1
 800333c:	4629      	mov	r1, r5
 800333e:	f7ff ffa7 	bl	8003290 <sbrk_aligned>
 8003342:	3001      	adds	r0, #1
 8003344:	d037      	beq.n	80033b6 <_malloc_r+0xe6>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	442b      	add	r3, r5
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	f8d8 3000 	ldr.w	r3, [r8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d038      	beq.n	80033c6 <_malloc_r+0xf6>
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	42a2      	cmp	r2, r4
 8003358:	d12b      	bne.n	80033b2 <_malloc_r+0xe2>
 800335a:	2200      	movs	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e00f      	b.n	8003380 <_malloc_r+0xb0>
 8003360:	6822      	ldr	r2, [r4, #0]
 8003362:	1b52      	subs	r2, r2, r5
 8003364:	d41f      	bmi.n	80033a6 <_malloc_r+0xd6>
 8003366:	2a0b      	cmp	r2, #11
 8003368:	d917      	bls.n	800339a <_malloc_r+0xca>
 800336a:	1961      	adds	r1, r4, r5
 800336c:	42a3      	cmp	r3, r4
 800336e:	6025      	str	r5, [r4, #0]
 8003370:	bf18      	it	ne
 8003372:	6059      	strne	r1, [r3, #4]
 8003374:	6863      	ldr	r3, [r4, #4]
 8003376:	bf08      	it	eq
 8003378:	f8c8 1000 	streq.w	r1, [r8]
 800337c:	5162      	str	r2, [r4, r5]
 800337e:	604b      	str	r3, [r1, #4]
 8003380:	4638      	mov	r0, r7
 8003382:	f104 060b 	add.w	r6, r4, #11
 8003386:	f000 f829 	bl	80033dc <__malloc_unlock>
 800338a:	f026 0607 	bic.w	r6, r6, #7
 800338e:	1d23      	adds	r3, r4, #4
 8003390:	1af2      	subs	r2, r6, r3
 8003392:	d0ae      	beq.n	80032f2 <_malloc_r+0x22>
 8003394:	1b9b      	subs	r3, r3, r6
 8003396:	50a3      	str	r3, [r4, r2]
 8003398:	e7ab      	b.n	80032f2 <_malloc_r+0x22>
 800339a:	42a3      	cmp	r3, r4
 800339c:	6862      	ldr	r2, [r4, #4]
 800339e:	d1dd      	bne.n	800335c <_malloc_r+0x8c>
 80033a0:	f8c8 2000 	str.w	r2, [r8]
 80033a4:	e7ec      	b.n	8003380 <_malloc_r+0xb0>
 80033a6:	4623      	mov	r3, r4
 80033a8:	6864      	ldr	r4, [r4, #4]
 80033aa:	e7ac      	b.n	8003306 <_malloc_r+0x36>
 80033ac:	4634      	mov	r4, r6
 80033ae:	6876      	ldr	r6, [r6, #4]
 80033b0:	e7b4      	b.n	800331c <_malloc_r+0x4c>
 80033b2:	4613      	mov	r3, r2
 80033b4:	e7cc      	b.n	8003350 <_malloc_r+0x80>
 80033b6:	230c      	movs	r3, #12
 80033b8:	4638      	mov	r0, r7
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	f000 f80e 	bl	80033dc <__malloc_unlock>
 80033c0:	e797      	b.n	80032f2 <_malloc_r+0x22>
 80033c2:	6025      	str	r5, [r4, #0]
 80033c4:	e7dc      	b.n	8003380 <_malloc_r+0xb0>
 80033c6:	605b      	str	r3, [r3, #4]
 80033c8:	deff      	udf	#255	; 0xff
 80033ca:	bf00      	nop
 80033cc:	20000364 	.word	0x20000364

080033d0 <__malloc_lock>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__malloc_lock+0x8>)
 80033d2:	f7ff bf12 	b.w	80031fa <__retarget_lock_acquire_recursive>
 80033d6:	bf00      	nop
 80033d8:	20000360 	.word	0x20000360

080033dc <__malloc_unlock>:
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <__malloc_unlock+0x8>)
 80033de:	f7ff bf0d 	b.w	80031fc <__retarget_lock_release_recursive>
 80033e2:	bf00      	nop
 80033e4:	20000360 	.word	0x20000360

080033e8 <__ssputs_r>:
 80033e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ec:	461f      	mov	r7, r3
 80033ee:	688e      	ldr	r6, [r1, #8]
 80033f0:	4682      	mov	sl, r0
 80033f2:	42be      	cmp	r6, r7
 80033f4:	460c      	mov	r4, r1
 80033f6:	4690      	mov	r8, r2
 80033f8:	680b      	ldr	r3, [r1, #0]
 80033fa:	d82c      	bhi.n	8003456 <__ssputs_r+0x6e>
 80033fc:	898a      	ldrh	r2, [r1, #12]
 80033fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003402:	d026      	beq.n	8003452 <__ssputs_r+0x6a>
 8003404:	6965      	ldr	r5, [r4, #20]
 8003406:	6909      	ldr	r1, [r1, #16]
 8003408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800340c:	eba3 0901 	sub.w	r9, r3, r1
 8003410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003414:	1c7b      	adds	r3, r7, #1
 8003416:	444b      	add	r3, r9
 8003418:	106d      	asrs	r5, r5, #1
 800341a:	429d      	cmp	r5, r3
 800341c:	bf38      	it	cc
 800341e:	461d      	movcc	r5, r3
 8003420:	0553      	lsls	r3, r2, #21
 8003422:	d527      	bpl.n	8003474 <__ssputs_r+0x8c>
 8003424:	4629      	mov	r1, r5
 8003426:	f7ff ff53 	bl	80032d0 <_malloc_r>
 800342a:	4606      	mov	r6, r0
 800342c:	b360      	cbz	r0, 8003488 <__ssputs_r+0xa0>
 800342e:	464a      	mov	r2, r9
 8003430:	6921      	ldr	r1, [r4, #16]
 8003432:	f000 fcd5 	bl	8003de0 <memcpy>
 8003436:	89a3      	ldrh	r3, [r4, #12]
 8003438:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	6126      	str	r6, [r4, #16]
 8003444:	444e      	add	r6, r9
 8003446:	6026      	str	r6, [r4, #0]
 8003448:	463e      	mov	r6, r7
 800344a:	6165      	str	r5, [r4, #20]
 800344c:	eba5 0509 	sub.w	r5, r5, r9
 8003450:	60a5      	str	r5, [r4, #8]
 8003452:	42be      	cmp	r6, r7
 8003454:	d900      	bls.n	8003458 <__ssputs_r+0x70>
 8003456:	463e      	mov	r6, r7
 8003458:	4632      	mov	r2, r6
 800345a:	4641      	mov	r1, r8
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	f000 fc87 	bl	8003d70 <memmove>
 8003462:	2000      	movs	r0, #0
 8003464:	68a3      	ldr	r3, [r4, #8]
 8003466:	1b9b      	subs	r3, r3, r6
 8003468:	60a3      	str	r3, [r4, #8]
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	4433      	add	r3, r6
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003474:	462a      	mov	r2, r5
 8003476:	f000 fcc1 	bl	8003dfc <_realloc_r>
 800347a:	4606      	mov	r6, r0
 800347c:	2800      	cmp	r0, #0
 800347e:	d1e0      	bne.n	8003442 <__ssputs_r+0x5a>
 8003480:	4650      	mov	r0, sl
 8003482:	6921      	ldr	r1, [r4, #16]
 8003484:	f7ff febc 	bl	8003200 <_free_r>
 8003488:	230c      	movs	r3, #12
 800348a:	f8ca 3000 	str.w	r3, [sl]
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003498:	81a3      	strh	r3, [r4, #12]
 800349a:	e7e9      	b.n	8003470 <__ssputs_r+0x88>

0800349c <_svfiprintf_r>:
 800349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a0:	4698      	mov	r8, r3
 80034a2:	898b      	ldrh	r3, [r1, #12]
 80034a4:	4607      	mov	r7, r0
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	460d      	mov	r5, r1
 80034aa:	4614      	mov	r4, r2
 80034ac:	b09d      	sub	sp, #116	; 0x74
 80034ae:	d50e      	bpl.n	80034ce <_svfiprintf_r+0x32>
 80034b0:	690b      	ldr	r3, [r1, #16]
 80034b2:	b963      	cbnz	r3, 80034ce <_svfiprintf_r+0x32>
 80034b4:	2140      	movs	r1, #64	; 0x40
 80034b6:	f7ff ff0b 	bl	80032d0 <_malloc_r>
 80034ba:	6028      	str	r0, [r5, #0]
 80034bc:	6128      	str	r0, [r5, #16]
 80034be:	b920      	cbnz	r0, 80034ca <_svfiprintf_r+0x2e>
 80034c0:	230c      	movs	r3, #12
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	e0d0      	b.n	800366c <_svfiprintf_r+0x1d0>
 80034ca:	2340      	movs	r3, #64	; 0x40
 80034cc:	616b      	str	r3, [r5, #20]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9309      	str	r3, [sp, #36]	; 0x24
 80034d2:	2320      	movs	r3, #32
 80034d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034d8:	2330      	movs	r3, #48	; 0x30
 80034da:	f04f 0901 	mov.w	r9, #1
 80034de:	f8cd 800c 	str.w	r8, [sp, #12]
 80034e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003684 <_svfiprintf_r+0x1e8>
 80034e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ea:	4623      	mov	r3, r4
 80034ec:	469a      	mov	sl, r3
 80034ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034f2:	b10a      	cbz	r2, 80034f8 <_svfiprintf_r+0x5c>
 80034f4:	2a25      	cmp	r2, #37	; 0x25
 80034f6:	d1f9      	bne.n	80034ec <_svfiprintf_r+0x50>
 80034f8:	ebba 0b04 	subs.w	fp, sl, r4
 80034fc:	d00b      	beq.n	8003516 <_svfiprintf_r+0x7a>
 80034fe:	465b      	mov	r3, fp
 8003500:	4622      	mov	r2, r4
 8003502:	4629      	mov	r1, r5
 8003504:	4638      	mov	r0, r7
 8003506:	f7ff ff6f 	bl	80033e8 <__ssputs_r>
 800350a:	3001      	adds	r0, #1
 800350c:	f000 80a9 	beq.w	8003662 <_svfiprintf_r+0x1c6>
 8003510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003512:	445a      	add	r2, fp
 8003514:	9209      	str	r2, [sp, #36]	; 0x24
 8003516:	f89a 3000 	ldrb.w	r3, [sl]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a1 	beq.w	8003662 <_svfiprintf_r+0x1c6>
 8003520:	2300      	movs	r3, #0
 8003522:	f04f 32ff 	mov.w	r2, #4294967295
 8003526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800352a:	f10a 0a01 	add.w	sl, sl, #1
 800352e:	9304      	str	r3, [sp, #16]
 8003530:	9307      	str	r3, [sp, #28]
 8003532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003536:	931a      	str	r3, [sp, #104]	; 0x68
 8003538:	4654      	mov	r4, sl
 800353a:	2205      	movs	r2, #5
 800353c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003540:	4850      	ldr	r0, [pc, #320]	; (8003684 <_svfiprintf_r+0x1e8>)
 8003542:	f000 fc3f 	bl	8003dc4 <memchr>
 8003546:	9a04      	ldr	r2, [sp, #16]
 8003548:	b9d8      	cbnz	r0, 8003582 <_svfiprintf_r+0xe6>
 800354a:	06d0      	lsls	r0, r2, #27
 800354c:	bf44      	itt	mi
 800354e:	2320      	movmi	r3, #32
 8003550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003554:	0711      	lsls	r1, r2, #28
 8003556:	bf44      	itt	mi
 8003558:	232b      	movmi	r3, #43	; 0x2b
 800355a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800355e:	f89a 3000 	ldrb.w	r3, [sl]
 8003562:	2b2a      	cmp	r3, #42	; 0x2a
 8003564:	d015      	beq.n	8003592 <_svfiprintf_r+0xf6>
 8003566:	4654      	mov	r4, sl
 8003568:	2000      	movs	r0, #0
 800356a:	f04f 0c0a 	mov.w	ip, #10
 800356e:	9a07      	ldr	r2, [sp, #28]
 8003570:	4621      	mov	r1, r4
 8003572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003576:	3b30      	subs	r3, #48	; 0x30
 8003578:	2b09      	cmp	r3, #9
 800357a:	d94d      	bls.n	8003618 <_svfiprintf_r+0x17c>
 800357c:	b1b0      	cbz	r0, 80035ac <_svfiprintf_r+0x110>
 800357e:	9207      	str	r2, [sp, #28]
 8003580:	e014      	b.n	80035ac <_svfiprintf_r+0x110>
 8003582:	eba0 0308 	sub.w	r3, r0, r8
 8003586:	fa09 f303 	lsl.w	r3, r9, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	46a2      	mov	sl, r4
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	e7d2      	b.n	8003538 <_svfiprintf_r+0x9c>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	1d19      	adds	r1, r3, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	9103      	str	r1, [sp, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	bfbb      	ittet	lt
 800359e:	425b      	neglt	r3, r3
 80035a0:	f042 0202 	orrlt.w	r2, r2, #2
 80035a4:	9307      	strge	r3, [sp, #28]
 80035a6:	9307      	strlt	r3, [sp, #28]
 80035a8:	bfb8      	it	lt
 80035aa:	9204      	strlt	r2, [sp, #16]
 80035ac:	7823      	ldrb	r3, [r4, #0]
 80035ae:	2b2e      	cmp	r3, #46	; 0x2e
 80035b0:	d10c      	bne.n	80035cc <_svfiprintf_r+0x130>
 80035b2:	7863      	ldrb	r3, [r4, #1]
 80035b4:	2b2a      	cmp	r3, #42	; 0x2a
 80035b6:	d134      	bne.n	8003622 <_svfiprintf_r+0x186>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	3402      	adds	r4, #2
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	9203      	str	r2, [sp, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfb8      	it	lt
 80035c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ca:	9305      	str	r3, [sp, #20]
 80035cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003688 <_svfiprintf_r+0x1ec>
 80035d0:	2203      	movs	r2, #3
 80035d2:	4650      	mov	r0, sl
 80035d4:	7821      	ldrb	r1, [r4, #0]
 80035d6:	f000 fbf5 	bl	8003dc4 <memchr>
 80035da:	b138      	cbz	r0, 80035ec <_svfiprintf_r+0x150>
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	9b04      	ldr	r3, [sp, #16]
 80035e0:	eba0 000a 	sub.w	r0, r0, sl
 80035e4:	4082      	lsls	r2, r0
 80035e6:	4313      	orrs	r3, r2
 80035e8:	3401      	adds	r4, #1
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f0:	2206      	movs	r2, #6
 80035f2:	4826      	ldr	r0, [pc, #152]	; (800368c <_svfiprintf_r+0x1f0>)
 80035f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035f8:	f000 fbe4 	bl	8003dc4 <memchr>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d038      	beq.n	8003672 <_svfiprintf_r+0x1d6>
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <_svfiprintf_r+0x1f4>)
 8003602:	bb1b      	cbnz	r3, 800364c <_svfiprintf_r+0x1b0>
 8003604:	9b03      	ldr	r3, [sp, #12]
 8003606:	3307      	adds	r3, #7
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	3308      	adds	r3, #8
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003612:	4433      	add	r3, r6
 8003614:	9309      	str	r3, [sp, #36]	; 0x24
 8003616:	e768      	b.n	80034ea <_svfiprintf_r+0x4e>
 8003618:	460c      	mov	r4, r1
 800361a:	2001      	movs	r0, #1
 800361c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003620:	e7a6      	b.n	8003570 <_svfiprintf_r+0xd4>
 8003622:	2300      	movs	r3, #0
 8003624:	f04f 0c0a 	mov.w	ip, #10
 8003628:	4619      	mov	r1, r3
 800362a:	3401      	adds	r4, #1
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	4620      	mov	r0, r4
 8003630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003634:	3a30      	subs	r2, #48	; 0x30
 8003636:	2a09      	cmp	r2, #9
 8003638:	d903      	bls.n	8003642 <_svfiprintf_r+0x1a6>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c6      	beq.n	80035cc <_svfiprintf_r+0x130>
 800363e:	9105      	str	r1, [sp, #20]
 8003640:	e7c4      	b.n	80035cc <_svfiprintf_r+0x130>
 8003642:	4604      	mov	r4, r0
 8003644:	2301      	movs	r3, #1
 8003646:	fb0c 2101 	mla	r1, ip, r1, r2
 800364a:	e7f0      	b.n	800362e <_svfiprintf_r+0x192>
 800364c:	ab03      	add	r3, sp, #12
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	462a      	mov	r2, r5
 8003652:	4638      	mov	r0, r7
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <_svfiprintf_r+0x1f8>)
 8003656:	a904      	add	r1, sp, #16
 8003658:	f3af 8000 	nop.w
 800365c:	1c42      	adds	r2, r0, #1
 800365e:	4606      	mov	r6, r0
 8003660:	d1d6      	bne.n	8003610 <_svfiprintf_r+0x174>
 8003662:	89ab      	ldrh	r3, [r5, #12]
 8003664:	065b      	lsls	r3, r3, #25
 8003666:	f53f af2d 	bmi.w	80034c4 <_svfiprintf_r+0x28>
 800366a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800366c:	b01d      	add	sp, #116	; 0x74
 800366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003672:	ab03      	add	r3, sp, #12
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	462a      	mov	r2, r5
 8003678:	4638      	mov	r0, r7
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <_svfiprintf_r+0x1f8>)
 800367c:	a904      	add	r1, sp, #16
 800367e:	f000 f9bf 	bl	8003a00 <_printf_i>
 8003682:	e7eb      	b.n	800365c <_svfiprintf_r+0x1c0>
 8003684:	0800406a 	.word	0x0800406a
 8003688:	08004070 	.word	0x08004070
 800368c:	08004074 	.word	0x08004074
 8003690:	00000000 	.word	0x00000000
 8003694:	080033e9 	.word	0x080033e9

08003698 <__sfputc_r>:
 8003698:	6893      	ldr	r3, [r2, #8]
 800369a:	b410      	push	{r4}
 800369c:	3b01      	subs	r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	da07      	bge.n	80036b4 <__sfputc_r+0x1c>
 80036a4:	6994      	ldr	r4, [r2, #24]
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	db01      	blt.n	80036ae <__sfputc_r+0x16>
 80036aa:	290a      	cmp	r1, #10
 80036ac:	d102      	bne.n	80036b4 <__sfputc_r+0x1c>
 80036ae:	bc10      	pop	{r4}
 80036b0:	f000 bac8 	b.w	8003c44 <__swbuf_r>
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	1c58      	adds	r0, r3, #1
 80036b8:	6010      	str	r0, [r2, #0]
 80036ba:	7019      	strb	r1, [r3, #0]
 80036bc:	4608      	mov	r0, r1
 80036be:	bc10      	pop	{r4}
 80036c0:	4770      	bx	lr

080036c2 <__sfputs_r>:
 80036c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c4:	4606      	mov	r6, r0
 80036c6:	460f      	mov	r7, r1
 80036c8:	4614      	mov	r4, r2
 80036ca:	18d5      	adds	r5, r2, r3
 80036cc:	42ac      	cmp	r4, r5
 80036ce:	d101      	bne.n	80036d4 <__sfputs_r+0x12>
 80036d0:	2000      	movs	r0, #0
 80036d2:	e007      	b.n	80036e4 <__sfputs_r+0x22>
 80036d4:	463a      	mov	r2, r7
 80036d6:	4630      	mov	r0, r6
 80036d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036dc:	f7ff ffdc 	bl	8003698 <__sfputc_r>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d1f3      	bne.n	80036cc <__sfputs_r+0xa>
 80036e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036e8 <_vfiprintf_r>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	460d      	mov	r5, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	4698      	mov	r8, r3
 80036f2:	4606      	mov	r6, r0
 80036f4:	b09d      	sub	sp, #116	; 0x74
 80036f6:	b118      	cbz	r0, 8003700 <_vfiprintf_r+0x18>
 80036f8:	6a03      	ldr	r3, [r0, #32]
 80036fa:	b90b      	cbnz	r3, 8003700 <_vfiprintf_r+0x18>
 80036fc:	f7ff fc44 	bl	8002f88 <__sinit>
 8003700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003702:	07d9      	lsls	r1, r3, #31
 8003704:	d405      	bmi.n	8003712 <_vfiprintf_r+0x2a>
 8003706:	89ab      	ldrh	r3, [r5, #12]
 8003708:	059a      	lsls	r2, r3, #22
 800370a:	d402      	bmi.n	8003712 <_vfiprintf_r+0x2a>
 800370c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800370e:	f7ff fd74 	bl	80031fa <__retarget_lock_acquire_recursive>
 8003712:	89ab      	ldrh	r3, [r5, #12]
 8003714:	071b      	lsls	r3, r3, #28
 8003716:	d501      	bpl.n	800371c <_vfiprintf_r+0x34>
 8003718:	692b      	ldr	r3, [r5, #16]
 800371a:	b99b      	cbnz	r3, 8003744 <_vfiprintf_r+0x5c>
 800371c:	4629      	mov	r1, r5
 800371e:	4630      	mov	r0, r6
 8003720:	f000 face 	bl	8003cc0 <__swsetup_r>
 8003724:	b170      	cbz	r0, 8003744 <_vfiprintf_r+0x5c>
 8003726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003728:	07dc      	lsls	r4, r3, #31
 800372a:	d504      	bpl.n	8003736 <_vfiprintf_r+0x4e>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	b01d      	add	sp, #116	; 0x74
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	89ab      	ldrh	r3, [r5, #12]
 8003738:	0598      	lsls	r0, r3, #22
 800373a:	d4f7      	bmi.n	800372c <_vfiprintf_r+0x44>
 800373c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800373e:	f7ff fd5d 	bl	80031fc <__retarget_lock_release_recursive>
 8003742:	e7f3      	b.n	800372c <_vfiprintf_r+0x44>
 8003744:	2300      	movs	r3, #0
 8003746:	9309      	str	r3, [sp, #36]	; 0x24
 8003748:	2320      	movs	r3, #32
 800374a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800374e:	2330      	movs	r3, #48	; 0x30
 8003750:	f04f 0901 	mov.w	r9, #1
 8003754:	f8cd 800c 	str.w	r8, [sp, #12]
 8003758:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003908 <_vfiprintf_r+0x220>
 800375c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003760:	4623      	mov	r3, r4
 8003762:	469a      	mov	sl, r3
 8003764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003768:	b10a      	cbz	r2, 800376e <_vfiprintf_r+0x86>
 800376a:	2a25      	cmp	r2, #37	; 0x25
 800376c:	d1f9      	bne.n	8003762 <_vfiprintf_r+0x7a>
 800376e:	ebba 0b04 	subs.w	fp, sl, r4
 8003772:	d00b      	beq.n	800378c <_vfiprintf_r+0xa4>
 8003774:	465b      	mov	r3, fp
 8003776:	4622      	mov	r2, r4
 8003778:	4629      	mov	r1, r5
 800377a:	4630      	mov	r0, r6
 800377c:	f7ff ffa1 	bl	80036c2 <__sfputs_r>
 8003780:	3001      	adds	r0, #1
 8003782:	f000 80a9 	beq.w	80038d8 <_vfiprintf_r+0x1f0>
 8003786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003788:	445a      	add	r2, fp
 800378a:	9209      	str	r2, [sp, #36]	; 0x24
 800378c:	f89a 3000 	ldrb.w	r3, [sl]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80a1 	beq.w	80038d8 <_vfiprintf_r+0x1f0>
 8003796:	2300      	movs	r3, #0
 8003798:	f04f 32ff 	mov.w	r2, #4294967295
 800379c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a0:	f10a 0a01 	add.w	sl, sl, #1
 80037a4:	9304      	str	r3, [sp, #16]
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ac:	931a      	str	r3, [sp, #104]	; 0x68
 80037ae:	4654      	mov	r4, sl
 80037b0:	2205      	movs	r2, #5
 80037b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b6:	4854      	ldr	r0, [pc, #336]	; (8003908 <_vfiprintf_r+0x220>)
 80037b8:	f000 fb04 	bl	8003dc4 <memchr>
 80037bc:	9a04      	ldr	r2, [sp, #16]
 80037be:	b9d8      	cbnz	r0, 80037f8 <_vfiprintf_r+0x110>
 80037c0:	06d1      	lsls	r1, r2, #27
 80037c2:	bf44      	itt	mi
 80037c4:	2320      	movmi	r3, #32
 80037c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ca:	0713      	lsls	r3, r2, #28
 80037cc:	bf44      	itt	mi
 80037ce:	232b      	movmi	r3, #43	; 0x2b
 80037d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d4:	f89a 3000 	ldrb.w	r3, [sl]
 80037d8:	2b2a      	cmp	r3, #42	; 0x2a
 80037da:	d015      	beq.n	8003808 <_vfiprintf_r+0x120>
 80037dc:	4654      	mov	r4, sl
 80037de:	2000      	movs	r0, #0
 80037e0:	f04f 0c0a 	mov.w	ip, #10
 80037e4:	9a07      	ldr	r2, [sp, #28]
 80037e6:	4621      	mov	r1, r4
 80037e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ec:	3b30      	subs	r3, #48	; 0x30
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	d94d      	bls.n	800388e <_vfiprintf_r+0x1a6>
 80037f2:	b1b0      	cbz	r0, 8003822 <_vfiprintf_r+0x13a>
 80037f4:	9207      	str	r2, [sp, #28]
 80037f6:	e014      	b.n	8003822 <_vfiprintf_r+0x13a>
 80037f8:	eba0 0308 	sub.w	r3, r0, r8
 80037fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003800:	4313      	orrs	r3, r2
 8003802:	46a2      	mov	sl, r4
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	e7d2      	b.n	80037ae <_vfiprintf_r+0xc6>
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	1d19      	adds	r1, r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	9103      	str	r1, [sp, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	bfbb      	ittet	lt
 8003814:	425b      	neglt	r3, r3
 8003816:	f042 0202 	orrlt.w	r2, r2, #2
 800381a:	9307      	strge	r3, [sp, #28]
 800381c:	9307      	strlt	r3, [sp, #28]
 800381e:	bfb8      	it	lt
 8003820:	9204      	strlt	r2, [sp, #16]
 8003822:	7823      	ldrb	r3, [r4, #0]
 8003824:	2b2e      	cmp	r3, #46	; 0x2e
 8003826:	d10c      	bne.n	8003842 <_vfiprintf_r+0x15a>
 8003828:	7863      	ldrb	r3, [r4, #1]
 800382a:	2b2a      	cmp	r3, #42	; 0x2a
 800382c:	d134      	bne.n	8003898 <_vfiprintf_r+0x1b0>
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	3402      	adds	r4, #2
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	9203      	str	r2, [sp, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfb8      	it	lt
 800383c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003840:	9305      	str	r3, [sp, #20]
 8003842:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800390c <_vfiprintf_r+0x224>
 8003846:	2203      	movs	r2, #3
 8003848:	4650      	mov	r0, sl
 800384a:	7821      	ldrb	r1, [r4, #0]
 800384c:	f000 faba 	bl	8003dc4 <memchr>
 8003850:	b138      	cbz	r0, 8003862 <_vfiprintf_r+0x17a>
 8003852:	2240      	movs	r2, #64	; 0x40
 8003854:	9b04      	ldr	r3, [sp, #16]
 8003856:	eba0 000a 	sub.w	r0, r0, sl
 800385a:	4082      	lsls	r2, r0
 800385c:	4313      	orrs	r3, r2
 800385e:	3401      	adds	r4, #1
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003866:	2206      	movs	r2, #6
 8003868:	4829      	ldr	r0, [pc, #164]	; (8003910 <_vfiprintf_r+0x228>)
 800386a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800386e:	f000 faa9 	bl	8003dc4 <memchr>
 8003872:	2800      	cmp	r0, #0
 8003874:	d03f      	beq.n	80038f6 <_vfiprintf_r+0x20e>
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <_vfiprintf_r+0x22c>)
 8003878:	bb1b      	cbnz	r3, 80038c2 <_vfiprintf_r+0x1da>
 800387a:	9b03      	ldr	r3, [sp, #12]
 800387c:	3307      	adds	r3, #7
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	3308      	adds	r3, #8
 8003884:	9303      	str	r3, [sp, #12]
 8003886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003888:	443b      	add	r3, r7
 800388a:	9309      	str	r3, [sp, #36]	; 0x24
 800388c:	e768      	b.n	8003760 <_vfiprintf_r+0x78>
 800388e:	460c      	mov	r4, r1
 8003890:	2001      	movs	r0, #1
 8003892:	fb0c 3202 	mla	r2, ip, r2, r3
 8003896:	e7a6      	b.n	80037e6 <_vfiprintf_r+0xfe>
 8003898:	2300      	movs	r3, #0
 800389a:	f04f 0c0a 	mov.w	ip, #10
 800389e:	4619      	mov	r1, r3
 80038a0:	3401      	adds	r4, #1
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	4620      	mov	r0, r4
 80038a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038aa:	3a30      	subs	r2, #48	; 0x30
 80038ac:	2a09      	cmp	r2, #9
 80038ae:	d903      	bls.n	80038b8 <_vfiprintf_r+0x1d0>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0c6      	beq.n	8003842 <_vfiprintf_r+0x15a>
 80038b4:	9105      	str	r1, [sp, #20]
 80038b6:	e7c4      	b.n	8003842 <_vfiprintf_r+0x15a>
 80038b8:	4604      	mov	r4, r0
 80038ba:	2301      	movs	r3, #1
 80038bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c0:	e7f0      	b.n	80038a4 <_vfiprintf_r+0x1bc>
 80038c2:	ab03      	add	r3, sp, #12
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	462a      	mov	r2, r5
 80038c8:	4630      	mov	r0, r6
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_vfiprintf_r+0x230>)
 80038cc:	a904      	add	r1, sp, #16
 80038ce:	f3af 8000 	nop.w
 80038d2:	4607      	mov	r7, r0
 80038d4:	1c78      	adds	r0, r7, #1
 80038d6:	d1d6      	bne.n	8003886 <_vfiprintf_r+0x19e>
 80038d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038da:	07d9      	lsls	r1, r3, #31
 80038dc:	d405      	bmi.n	80038ea <_vfiprintf_r+0x202>
 80038de:	89ab      	ldrh	r3, [r5, #12]
 80038e0:	059a      	lsls	r2, r3, #22
 80038e2:	d402      	bmi.n	80038ea <_vfiprintf_r+0x202>
 80038e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038e6:	f7ff fc89 	bl	80031fc <__retarget_lock_release_recursive>
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	065b      	lsls	r3, r3, #25
 80038ee:	f53f af1d 	bmi.w	800372c <_vfiprintf_r+0x44>
 80038f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f4:	e71c      	b.n	8003730 <_vfiprintf_r+0x48>
 80038f6:	ab03      	add	r3, sp, #12
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	462a      	mov	r2, r5
 80038fc:	4630      	mov	r0, r6
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <_vfiprintf_r+0x230>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	f000 f87d 	bl	8003a00 <_printf_i>
 8003906:	e7e4      	b.n	80038d2 <_vfiprintf_r+0x1ea>
 8003908:	0800406a 	.word	0x0800406a
 800390c:	08004070 	.word	0x08004070
 8003910:	08004074 	.word	0x08004074
 8003914:	00000000 	.word	0x00000000
 8003918:	080036c3 	.word	0x080036c3

0800391c <_printf_common>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	4616      	mov	r6, r2
 8003922:	4699      	mov	r9, r3
 8003924:	688a      	ldr	r2, [r1, #8]
 8003926:	690b      	ldr	r3, [r1, #16]
 8003928:	4607      	mov	r7, r0
 800392a:	4293      	cmp	r3, r2
 800392c:	bfb8      	it	lt
 800392e:	4613      	movlt	r3, r2
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003936:	460c      	mov	r4, r1
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	b10a      	cbz	r2, 8003942 <_printf_common+0x26>
 800393e:	3301      	adds	r3, #1
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	0699      	lsls	r1, r3, #26
 8003946:	bf42      	ittt	mi
 8003948:	6833      	ldrmi	r3, [r6, #0]
 800394a:	3302      	addmi	r3, #2
 800394c:	6033      	strmi	r3, [r6, #0]
 800394e:	6825      	ldr	r5, [r4, #0]
 8003950:	f015 0506 	ands.w	r5, r5, #6
 8003954:	d106      	bne.n	8003964 <_printf_common+0x48>
 8003956:	f104 0a19 	add.w	sl, r4, #25
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	6832      	ldr	r2, [r6, #0]
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	42ab      	cmp	r3, r5
 8003962:	dc2b      	bgt.n	80039bc <_printf_common+0xa0>
 8003964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003968:	1e13      	subs	r3, r2, #0
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	2301      	movne	r3, #1
 8003970:	0692      	lsls	r2, r2, #26
 8003972:	d430      	bmi.n	80039d6 <_printf_common+0xba>
 8003974:	4649      	mov	r1, r9
 8003976:	4638      	mov	r0, r7
 8003978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800397c:	47c0      	blx	r8
 800397e:	3001      	adds	r0, #1
 8003980:	d023      	beq.n	80039ca <_printf_common+0xae>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	f003 0306 	and.w	r3, r3, #6
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf14      	ite	ne
 800398e:	2500      	movne	r5, #0
 8003990:	6833      	ldreq	r3, [r6, #0]
 8003992:	f04f 0600 	mov.w	r6, #0
 8003996:	bf08      	it	eq
 8003998:	68e5      	ldreq	r5, [r4, #12]
 800399a:	f104 041a 	add.w	r4, r4, #26
 800399e:	bf08      	it	eq
 80039a0:	1aed      	subeq	r5, r5, r3
 80039a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039a6:	bf08      	it	eq
 80039a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039ac:	4293      	cmp	r3, r2
 80039ae:	bfc4      	itt	gt
 80039b0:	1a9b      	subgt	r3, r3, r2
 80039b2:	18ed      	addgt	r5, r5, r3
 80039b4:	42b5      	cmp	r5, r6
 80039b6:	d11a      	bne.n	80039ee <_printf_common+0xd2>
 80039b8:	2000      	movs	r0, #0
 80039ba:	e008      	b.n	80039ce <_printf_common+0xb2>
 80039bc:	2301      	movs	r3, #1
 80039be:	4652      	mov	r2, sl
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d103      	bne.n	80039d2 <_printf_common+0xb6>
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d2:	3501      	adds	r5, #1
 80039d4:	e7c1      	b.n	800395a <_printf_common+0x3e>
 80039d6:	2030      	movs	r0, #48	; 0x30
 80039d8:	18e1      	adds	r1, r4, r3
 80039da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039e4:	4422      	add	r2, r4
 80039e6:	3302      	adds	r3, #2
 80039e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ec:	e7c2      	b.n	8003974 <_printf_common+0x58>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4622      	mov	r2, r4
 80039f2:	4649      	mov	r1, r9
 80039f4:	4638      	mov	r0, r7
 80039f6:	47c0      	blx	r8
 80039f8:	3001      	adds	r0, #1
 80039fa:	d0e6      	beq.n	80039ca <_printf_common+0xae>
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7d9      	b.n	80039b4 <_printf_common+0x98>

08003a00 <_printf_i>:
 8003a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a04:	7e0f      	ldrb	r7, [r1, #24]
 8003a06:	4691      	mov	r9, r2
 8003a08:	2f78      	cmp	r7, #120	; 0x78
 8003a0a:	4680      	mov	r8, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	469a      	mov	sl, r3
 8003a10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a16:	d807      	bhi.n	8003a28 <_printf_i+0x28>
 8003a18:	2f62      	cmp	r7, #98	; 0x62
 8003a1a:	d80a      	bhi.n	8003a32 <_printf_i+0x32>
 8003a1c:	2f00      	cmp	r7, #0
 8003a1e:	f000 80d5 	beq.w	8003bcc <_printf_i+0x1cc>
 8003a22:	2f58      	cmp	r7, #88	; 0x58
 8003a24:	f000 80c1 	beq.w	8003baa <_printf_i+0x1aa>
 8003a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a30:	e03a      	b.n	8003aa8 <_printf_i+0xa8>
 8003a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a36:	2b15      	cmp	r3, #21
 8003a38:	d8f6      	bhi.n	8003a28 <_printf_i+0x28>
 8003a3a:	a101      	add	r1, pc, #4	; (adr r1, 8003a40 <_printf_i+0x40>)
 8003a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003aad 	.word	0x08003aad
 8003a48:	08003a29 	.word	0x08003a29
 8003a4c:	08003a29 	.word	0x08003a29
 8003a50:	08003a29 	.word	0x08003a29
 8003a54:	08003a29 	.word	0x08003a29
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	08003a29 	.word	0x08003a29
 8003a60:	08003a29 	.word	0x08003a29
 8003a64:	08003a29 	.word	0x08003a29
 8003a68:	08003a29 	.word	0x08003a29
 8003a6c:	08003bb3 	.word	0x08003bb3
 8003a70:	08003ad9 	.word	0x08003ad9
 8003a74:	08003b6d 	.word	0x08003b6d
 8003a78:	08003a29 	.word	0x08003a29
 8003a7c:	08003a29 	.word	0x08003a29
 8003a80:	08003bd5 	.word	0x08003bd5
 8003a84:	08003a29 	.word	0x08003a29
 8003a88:	08003ad9 	.word	0x08003ad9
 8003a8c:	08003a29 	.word	0x08003a29
 8003a90:	08003a29 	.word	0x08003a29
 8003a94:	08003b75 	.word	0x08003b75
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	602a      	str	r2, [r5, #0]
 8003aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0a0      	b.n	8003bee <_printf_i+0x1ee>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	0607      	lsls	r7, r0, #24
 8003ab2:	f103 0104 	add.w	r1, r3, #4
 8003ab6:	6029      	str	r1, [r5, #0]
 8003ab8:	d501      	bpl.n	8003abe <_printf_i+0xbe>
 8003aba:	681e      	ldr	r6, [r3, #0]
 8003abc:	e003      	b.n	8003ac6 <_printf_i+0xc6>
 8003abe:	0646      	lsls	r6, r0, #25
 8003ac0:	d5fb      	bpl.n	8003aba <_printf_i+0xba>
 8003ac2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	da03      	bge.n	8003ad2 <_printf_i+0xd2>
 8003aca:	232d      	movs	r3, #45	; 0x2d
 8003acc:	4276      	negs	r6, r6
 8003ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	4859      	ldr	r0, [pc, #356]	; (8003c3c <_printf_i+0x23c>)
 8003ad6:	e012      	b.n	8003afe <_printf_i+0xfe>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	1d19      	adds	r1, r3, #4
 8003ade:	6029      	str	r1, [r5, #0]
 8003ae0:	0605      	lsls	r5, r0, #24
 8003ae2:	d501      	bpl.n	8003ae8 <_printf_i+0xe8>
 8003ae4:	681e      	ldr	r6, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <_printf_i+0xee>
 8003ae8:	0641      	lsls	r1, r0, #25
 8003aea:	d5fb      	bpl.n	8003ae4 <_printf_i+0xe4>
 8003aec:	881e      	ldrh	r6, [r3, #0]
 8003aee:	2f6f      	cmp	r7, #111	; 0x6f
 8003af0:	bf0c      	ite	eq
 8003af2:	2308      	moveq	r3, #8
 8003af4:	230a      	movne	r3, #10
 8003af6:	4851      	ldr	r0, [pc, #324]	; (8003c3c <_printf_i+0x23c>)
 8003af8:	2100      	movs	r1, #0
 8003afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003afe:	6865      	ldr	r5, [r4, #4]
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	bfa8      	it	ge
 8003b04:	6821      	ldrge	r1, [r4, #0]
 8003b06:	60a5      	str	r5, [r4, #8]
 8003b08:	bfa4      	itt	ge
 8003b0a:	f021 0104 	bicge.w	r1, r1, #4
 8003b0e:	6021      	strge	r1, [r4, #0]
 8003b10:	b90e      	cbnz	r6, 8003b16 <_printf_i+0x116>
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	d04b      	beq.n	8003bae <_printf_i+0x1ae>
 8003b16:	4615      	mov	r5, r2
 8003b18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003b20:	5dc7      	ldrb	r7, [r0, r7]
 8003b22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b26:	4637      	mov	r7, r6
 8003b28:	42bb      	cmp	r3, r7
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	d9f4      	bls.n	8003b18 <_printf_i+0x118>
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d10b      	bne.n	8003b4a <_printf_i+0x14a>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	07de      	lsls	r6, r3, #31
 8003b36:	d508      	bpl.n	8003b4a <_printf_i+0x14a>
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	6861      	ldr	r1, [r4, #4]
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	bfde      	ittt	le
 8003b40:	2330      	movle	r3, #48	; 0x30
 8003b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b4a:	1b52      	subs	r2, r2, r5
 8003b4c:	6122      	str	r2, [r4, #16]
 8003b4e:	464b      	mov	r3, r9
 8003b50:	4621      	mov	r1, r4
 8003b52:	4640      	mov	r0, r8
 8003b54:	f8cd a000 	str.w	sl, [sp]
 8003b58:	aa03      	add	r2, sp, #12
 8003b5a:	f7ff fedf 	bl	800391c <_printf_common>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d14a      	bne.n	8003bf8 <_printf_i+0x1f8>
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	b004      	add	sp, #16
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f043 0320 	orr.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2778      	movs	r7, #120	; 0x78
 8003b76:	4832      	ldr	r0, [pc, #200]	; (8003c40 <_printf_i+0x240>)
 8003b78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	6829      	ldr	r1, [r5, #0]
 8003b80:	061f      	lsls	r7, r3, #24
 8003b82:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b86:	d402      	bmi.n	8003b8e <_printf_i+0x18e>
 8003b88:	065f      	lsls	r7, r3, #25
 8003b8a:	bf48      	it	mi
 8003b8c:	b2b6      	uxthmi	r6, r6
 8003b8e:	07df      	lsls	r7, r3, #31
 8003b90:	bf48      	it	mi
 8003b92:	f043 0320 	orrmi.w	r3, r3, #32
 8003b96:	6029      	str	r1, [r5, #0]
 8003b98:	bf48      	it	mi
 8003b9a:	6023      	strmi	r3, [r4, #0]
 8003b9c:	b91e      	cbnz	r6, 8003ba6 <_printf_i+0x1a6>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	f023 0320 	bic.w	r3, r3, #32
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	e7a6      	b.n	8003af8 <_printf_i+0xf8>
 8003baa:	4824      	ldr	r0, [pc, #144]	; (8003c3c <_printf_i+0x23c>)
 8003bac:	e7e4      	b.n	8003b78 <_printf_i+0x178>
 8003bae:	4615      	mov	r5, r2
 8003bb0:	e7bd      	b.n	8003b2e <_printf_i+0x12e>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	6826      	ldr	r6, [r4, #0]
 8003bb6:	1d18      	adds	r0, r3, #4
 8003bb8:	6961      	ldr	r1, [r4, #20]
 8003bba:	6028      	str	r0, [r5, #0]
 8003bbc:	0635      	lsls	r5, r6, #24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	d501      	bpl.n	8003bc6 <_printf_i+0x1c6>
 8003bc2:	6019      	str	r1, [r3, #0]
 8003bc4:	e002      	b.n	8003bcc <_printf_i+0x1cc>
 8003bc6:	0670      	lsls	r0, r6, #25
 8003bc8:	d5fb      	bpl.n	8003bc2 <_printf_i+0x1c2>
 8003bca:	8019      	strh	r1, [r3, #0]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4615      	mov	r5, r2
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	e7bc      	b.n	8003b4e <_printf_i+0x14e>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	602a      	str	r2, [r5, #0]
 8003bdc:	681d      	ldr	r5, [r3, #0]
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 f8ef 	bl	8003dc4 <memchr>
 8003be6:	b108      	cbz	r0, 8003bec <_printf_i+0x1ec>
 8003be8:	1b40      	subs	r0, r0, r5
 8003bea:	6060      	str	r0, [r4, #4]
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf6:	e7aa      	b.n	8003b4e <_printf_i+0x14e>
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	47d0      	blx	sl
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0ad      	beq.n	8003b62 <_printf_i+0x162>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	079b      	lsls	r3, r3, #30
 8003c0a:	d413      	bmi.n	8003c34 <_printf_i+0x234>
 8003c0c:	68e0      	ldr	r0, [r4, #12]
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	4298      	cmp	r0, r3
 8003c12:	bfb8      	it	lt
 8003c14:	4618      	movlt	r0, r3
 8003c16:	e7a6      	b.n	8003b66 <_printf_i+0x166>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4632      	mov	r2, r6
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	4640      	mov	r0, r8
 8003c20:	47d0      	blx	sl
 8003c22:	3001      	adds	r0, #1
 8003c24:	d09d      	beq.n	8003b62 <_printf_i+0x162>
 8003c26:	3501      	adds	r5, #1
 8003c28:	68e3      	ldr	r3, [r4, #12]
 8003c2a:	9903      	ldr	r1, [sp, #12]
 8003c2c:	1a5b      	subs	r3, r3, r1
 8003c2e:	42ab      	cmp	r3, r5
 8003c30:	dcf2      	bgt.n	8003c18 <_printf_i+0x218>
 8003c32:	e7eb      	b.n	8003c0c <_printf_i+0x20c>
 8003c34:	2500      	movs	r5, #0
 8003c36:	f104 0619 	add.w	r6, r4, #25
 8003c3a:	e7f5      	b.n	8003c28 <_printf_i+0x228>
 8003c3c:	0800407b 	.word	0x0800407b
 8003c40:	0800408c 	.word	0x0800408c

08003c44 <__swbuf_r>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	460e      	mov	r6, r1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	4605      	mov	r5, r0
 8003c4c:	b118      	cbz	r0, 8003c56 <__swbuf_r+0x12>
 8003c4e:	6a03      	ldr	r3, [r0, #32]
 8003c50:	b90b      	cbnz	r3, 8003c56 <__swbuf_r+0x12>
 8003c52:	f7ff f999 	bl	8002f88 <__sinit>
 8003c56:	69a3      	ldr	r3, [r4, #24]
 8003c58:	60a3      	str	r3, [r4, #8]
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	071a      	lsls	r2, r3, #28
 8003c5e:	d525      	bpl.n	8003cac <__swbuf_r+0x68>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	b31b      	cbz	r3, 8003cac <__swbuf_r+0x68>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	6922      	ldr	r2, [r4, #16]
 8003c68:	b2f6      	uxtb	r6, r6
 8003c6a:	1a98      	subs	r0, r3, r2
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	4637      	mov	r7, r6
 8003c70:	4283      	cmp	r3, r0
 8003c72:	dc04      	bgt.n	8003c7e <__swbuf_r+0x3a>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	f7ff f8be 	bl	8002df8 <_fflush_r>
 8003c7c:	b9e0      	cbnz	r0, 8003cb8 <__swbuf_r+0x74>
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	701e      	strb	r6, [r3, #0]
 8003c8c:	6962      	ldr	r2, [r4, #20]
 8003c8e:	1c43      	adds	r3, r0, #1
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d004      	beq.n	8003c9e <__swbuf_r+0x5a>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	07db      	lsls	r3, r3, #31
 8003c98:	d506      	bpl.n	8003ca8 <__swbuf_r+0x64>
 8003c9a:	2e0a      	cmp	r6, #10
 8003c9c:	d104      	bne.n	8003ca8 <__swbuf_r+0x64>
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f7ff f8a9 	bl	8002df8 <_fflush_r>
 8003ca6:	b938      	cbnz	r0, 8003cb8 <__swbuf_r+0x74>
 8003ca8:	4638      	mov	r0, r7
 8003caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cac:	4621      	mov	r1, r4
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f000 f806 	bl	8003cc0 <__swsetup_r>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d0d5      	beq.n	8003c64 <__swbuf_r+0x20>
 8003cb8:	f04f 37ff 	mov.w	r7, #4294967295
 8003cbc:	e7f4      	b.n	8003ca8 <__swbuf_r+0x64>
	...

08003cc0 <__swsetup_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <__swsetup_r+0xac>)
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	460c      	mov	r4, r1
 8003cca:	b118      	cbz	r0, 8003cd4 <__swsetup_r+0x14>
 8003ccc:	6a03      	ldr	r3, [r0, #32]
 8003cce:	b90b      	cbnz	r3, 8003cd4 <__swsetup_r+0x14>
 8003cd0:	f7ff f95a 	bl	8002f88 <__sinit>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cda:	0718      	lsls	r0, r3, #28
 8003cdc:	d422      	bmi.n	8003d24 <__swsetup_r+0x64>
 8003cde:	06d9      	lsls	r1, r3, #27
 8003ce0:	d407      	bmi.n	8003cf2 <__swsetup_r+0x32>
 8003ce2:	2309      	movs	r3, #9
 8003ce4:	602b      	str	r3, [r5, #0]
 8003ce6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	e034      	b.n	8003d5c <__swsetup_r+0x9c>
 8003cf2:	0758      	lsls	r0, r3, #29
 8003cf4:	d512      	bpl.n	8003d1c <__swsetup_r+0x5c>
 8003cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cf8:	b141      	cbz	r1, 8003d0c <__swsetup_r+0x4c>
 8003cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d002      	beq.n	8003d08 <__swsetup_r+0x48>
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7ff fa7c 	bl	8003200 <_free_r>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	2300      	movs	r3, #0
 8003d16:	6063      	str	r3, [r4, #4]
 8003d18:	6923      	ldr	r3, [r4, #16]
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	b94b      	cbnz	r3, 8003d3c <__swsetup_r+0x7c>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d32:	d003      	beq.n	8003d3c <__swsetup_r+0x7c>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f8b4 	bl	8003ea4 <__smakebuf_r>
 8003d3c:	89a0      	ldrh	r0, [r4, #12]
 8003d3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d42:	f010 0301 	ands.w	r3, r0, #1
 8003d46:	d00a      	beq.n	8003d5e <__swsetup_r+0x9e>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60a3      	str	r3, [r4, #8]
 8003d4c:	6963      	ldr	r3, [r4, #20]
 8003d4e:	425b      	negs	r3, r3
 8003d50:	61a3      	str	r3, [r4, #24]
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	b943      	cbnz	r3, 8003d68 <__swsetup_r+0xa8>
 8003d56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d5a:	d1c4      	bne.n	8003ce6 <__swsetup_r+0x26>
 8003d5c:	bd38      	pop	{r3, r4, r5, pc}
 8003d5e:	0781      	lsls	r1, r0, #30
 8003d60:	bf58      	it	pl
 8003d62:	6963      	ldrpl	r3, [r4, #20]
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	e7f4      	b.n	8003d52 <__swsetup_r+0x92>
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e7f7      	b.n	8003d5c <__swsetup_r+0x9c>
 8003d6c:	20000074 	.word	0x20000074

08003d70 <memmove>:
 8003d70:	4288      	cmp	r0, r1
 8003d72:	b510      	push	{r4, lr}
 8003d74:	eb01 0402 	add.w	r4, r1, r2
 8003d78:	d902      	bls.n	8003d80 <memmove+0x10>
 8003d7a:	4284      	cmp	r4, r0
 8003d7c:	4623      	mov	r3, r4
 8003d7e:	d807      	bhi.n	8003d90 <memmove+0x20>
 8003d80:	1e43      	subs	r3, r0, #1
 8003d82:	42a1      	cmp	r1, r4
 8003d84:	d008      	beq.n	8003d98 <memmove+0x28>
 8003d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d8e:	e7f8      	b.n	8003d82 <memmove+0x12>
 8003d90:	4601      	mov	r1, r0
 8003d92:	4402      	add	r2, r0
 8003d94:	428a      	cmp	r2, r1
 8003d96:	d100      	bne.n	8003d9a <memmove+0x2a>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da2:	e7f7      	b.n	8003d94 <memmove+0x24>

08003da4 <_sbrk_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	2300      	movs	r3, #0
 8003da8:	4d05      	ldr	r5, [pc, #20]	; (8003dc0 <_sbrk_r+0x1c>)
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	f7fc fc3a 	bl	8000628 <_sbrk>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_sbrk_r+0x1a>
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_sbrk_r+0x1a>
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	2000035c 	.word	0x2000035c

08003dc4 <memchr>:
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	b2c9      	uxtb	r1, r1
 8003dca:	4402      	add	r2, r0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	d101      	bne.n	8003dd6 <memchr+0x12>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e003      	b.n	8003dde <memchr+0x1a>
 8003dd6:	7804      	ldrb	r4, [r0, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	428c      	cmp	r4, r1
 8003ddc:	d1f6      	bne.n	8003dcc <memchr+0x8>
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <memcpy>:
 8003de0:	440a      	add	r2, r1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de8:	d100      	bne.n	8003dec <memcpy+0xc>
 8003dea:	4770      	bx	lr
 8003dec:	b510      	push	{r4, lr}
 8003dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df2:	4291      	cmp	r1, r2
 8003df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df8:	d1f9      	bne.n	8003dee <memcpy+0xe>
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <_realloc_r>:
 8003dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e00:	4680      	mov	r8, r0
 8003e02:	4614      	mov	r4, r2
 8003e04:	460e      	mov	r6, r1
 8003e06:	b921      	cbnz	r1, 8003e12 <_realloc_r+0x16>
 8003e08:	4611      	mov	r1, r2
 8003e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0e:	f7ff ba5f 	b.w	80032d0 <_malloc_r>
 8003e12:	b92a      	cbnz	r2, 8003e20 <_realloc_r+0x24>
 8003e14:	f7ff f9f4 	bl	8003200 <_free_r>
 8003e18:	4625      	mov	r5, r4
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e20:	f000 f89e 	bl	8003f60 <_malloc_usable_size_r>
 8003e24:	4284      	cmp	r4, r0
 8003e26:	4607      	mov	r7, r0
 8003e28:	d802      	bhi.n	8003e30 <_realloc_r+0x34>
 8003e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e2e:	d812      	bhi.n	8003e56 <_realloc_r+0x5a>
 8003e30:	4621      	mov	r1, r4
 8003e32:	4640      	mov	r0, r8
 8003e34:	f7ff fa4c 	bl	80032d0 <_malloc_r>
 8003e38:	4605      	mov	r5, r0
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d0ed      	beq.n	8003e1a <_realloc_r+0x1e>
 8003e3e:	42bc      	cmp	r4, r7
 8003e40:	4622      	mov	r2, r4
 8003e42:	4631      	mov	r1, r6
 8003e44:	bf28      	it	cs
 8003e46:	463a      	movcs	r2, r7
 8003e48:	f7ff ffca 	bl	8003de0 <memcpy>
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	4640      	mov	r0, r8
 8003e50:	f7ff f9d6 	bl	8003200 <_free_r>
 8003e54:	e7e1      	b.n	8003e1a <_realloc_r+0x1e>
 8003e56:	4635      	mov	r5, r6
 8003e58:	e7df      	b.n	8003e1a <_realloc_r+0x1e>

08003e5a <__swhatbuf_r>:
 8003e5a:	b570      	push	{r4, r5, r6, lr}
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	4615      	mov	r5, r2
 8003e64:	2900      	cmp	r1, #0
 8003e66:	461e      	mov	r6, r3
 8003e68:	b096      	sub	sp, #88	; 0x58
 8003e6a:	da0c      	bge.n	8003e86 <__swhatbuf_r+0x2c>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e74:	bf0c      	ite	eq
 8003e76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003e7a:	2340      	movne	r3, #64	; 0x40
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	6031      	str	r1, [r6, #0]
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	b016      	add	sp, #88	; 0x58
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	466a      	mov	r2, sp
 8003e88:	f000 f848 	bl	8003f1c <_fstat_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	dbed      	blt.n	8003e6c <__swhatbuf_r+0x12>
 8003e90:	9901      	ldr	r1, [sp, #4]
 8003e92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003e96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003e9a:	4259      	negs	r1, r3
 8003e9c:	4159      	adcs	r1, r3
 8003e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ea2:	e7eb      	b.n	8003e7c <__swhatbuf_r+0x22>

08003ea4 <__smakebuf_r>:
 8003ea4:	898b      	ldrh	r3, [r1, #12]
 8003ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ea8:	079d      	lsls	r5, r3, #30
 8003eaa:	4606      	mov	r6, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	d507      	bpl.n	8003ec0 <__smakebuf_r+0x1c>
 8003eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	6123      	str	r3, [r4, #16]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	6163      	str	r3, [r4, #20]
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	466a      	mov	r2, sp
 8003ec2:	ab01      	add	r3, sp, #4
 8003ec4:	f7ff ffc9 	bl	8003e5a <__swhatbuf_r>
 8003ec8:	9900      	ldr	r1, [sp, #0]
 8003eca:	4605      	mov	r5, r0
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f7ff f9ff 	bl	80032d0 <_malloc_r>
 8003ed2:	b948      	cbnz	r0, 8003ee8 <__smakebuf_r+0x44>
 8003ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed8:	059a      	lsls	r2, r3, #22
 8003eda:	d4ef      	bmi.n	8003ebc <__smakebuf_r+0x18>
 8003edc:	f023 0303 	bic.w	r3, r3, #3
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	e7e3      	b.n	8003eb0 <__smakebuf_r+0xc>
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	6020      	str	r0, [r4, #0]
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	9b00      	ldr	r3, [sp, #0]
 8003ef4:	6120      	str	r0, [r4, #16]
 8003ef6:	6163      	str	r3, [r4, #20]
 8003ef8:	9b01      	ldr	r3, [sp, #4]
 8003efa:	b15b      	cbz	r3, 8003f14 <__smakebuf_r+0x70>
 8003efc:	4630      	mov	r0, r6
 8003efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f02:	f000 f81d 	bl	8003f40 <_isatty_r>
 8003f06:	b128      	cbz	r0, 8003f14 <__smakebuf_r+0x70>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	431d      	orrs	r5, r3
 8003f18:	81a5      	strh	r5, [r4, #12]
 8003f1a:	e7cf      	b.n	8003ebc <__smakebuf_r+0x18>

08003f1c <_fstat_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4d06      	ldr	r5, [pc, #24]	; (8003f3c <_fstat_r+0x20>)
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	f7fe fd60 	bl	80029ee <_fstat>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d102      	bne.n	8003f38 <_fstat_r+0x1c>
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	b103      	cbz	r3, 8003f38 <_fstat_r+0x1c>
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	bd38      	pop	{r3, r4, r5, pc}
 8003f3a:	bf00      	nop
 8003f3c:	2000035c 	.word	0x2000035c

08003f40 <_isatty_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	2300      	movs	r3, #0
 8003f44:	4d05      	ldr	r5, [pc, #20]	; (8003f5c <_isatty_r+0x1c>)
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fe feb6 	bl	8002cbc <_isatty>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	d102      	bne.n	8003f5a <_isatty_r+0x1a>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b103      	cbz	r3, 8003f5a <_isatty_r+0x1a>
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}
 8003f5c:	2000035c 	.word	0x2000035c

08003f60 <_malloc_usable_size_r>:
 8003f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f64:	1f18      	subs	r0, r3, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfbc      	itt	lt
 8003f6a:	580b      	ldrlt	r3, [r1, r0]
 8003f6c:	18c0      	addlt	r0, r0, r3
 8003f6e:	4770      	bx	lr

08003f70 <_init>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr

08003f7c <_fini>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr
